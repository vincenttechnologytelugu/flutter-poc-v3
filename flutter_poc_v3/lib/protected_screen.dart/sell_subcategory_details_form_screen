// screens/sell_subcategory_details_form_screen.dart
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:video_player/video_player.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http_parser/http_parser.dart';
import 'package:provider/provider.dart';
import 'package:dio/dio.dart';
import 'package:mime/mime.dart';
// At the top of your file, add this import
import 'package:flutter_poc_v3/protected_screen.dart/uploading_screen.dart';

import 'package:flutter_poc_v3/protected_screen.dart/package_screen.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter_poc_v3/protected_screen.dart/custom_text_form_field.dart';

class SellSubcategoryDetailsFormScreen extends StatefulWidget {
  final String category;
  final String subcategory;
  final Color categoryColor;
 

  const SellSubcategoryDetailsFormScreen({
    Key? key,
    required this.category,
    required this.subcategory,
    required this.categoryColor,
   
  }) : super(key: key);

  @override
  State<SellSubcategoryDetailsFormScreen> createState() =>
      _SellSubcategoryDetailsFormScreenState();
}





class _SellSubcategoryDetailsFormScreenState
    extends State<SellSubcategoryDetailsFormScreen> {

      late Map<String, TextEditingController> controllers;
     bool isLoading = false;  // Add this line
  final _formKey = GlobalKey<FormState>();
    String selectedType = 'Type'; // Add this line at the class level
  String selectedFurnishing = 'Furnishing'; // Add this variable
  String selectedListed="Listed by";
  String selectedBrand = 'Brand';
  String selectedPeriod='Salary Period';
  String selectedPosition='Position Type';

bool _isFormReadOnly = false;
bool _isSubmitDisabled = false;



// Create a reusable function to show state selection popup
Future<String?> showStateSelectionDialog(BuildContext context) async {
  final TextEditingController searchController = TextEditingController();
  List<String> indianStates = [
    'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
    'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka',
    'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',
    'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu',
    'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal',
    'Andaman and Nicobar Islands', 'Chandigarh', 'Dadra and Nagar Haveli',
    'Daman and Diu', 'Delhi', 'Jammu and Kashmir', 'Ladakh', 'Lakshadweep',
    'Puducherry'
  ];
  List<String> filteredStates = indianStates;

  return showDialog<String>(
    context: context,
    builder: (BuildContext context) {
      return StatefulBuilder(
        builder: (context, setState) {
          return Dialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            child: Container(
              width: double.maxFinite,
              constraints: const BoxConstraints(maxHeight: 500),
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Select State',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      IconButton(
                        icon: const Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  TextField(
                    controller: searchController,
                    decoration: InputDecoration(
                      hintText: 'Search State',
                      prefixIcon: const Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onChanged: (value) {
                      setState(() {
                        filteredStates = indianStates
                            .where((state) => state.toLowerCase()
                                .contains(value.toLowerCase()))
                            .toList();
                      });
                    },
                  ),
                  const SizedBox(height: 8),
                  Expanded(
                    child: ListView.builder(
                      itemCount: filteredStates.length,
                      itemBuilder: (context, index) {
                        return ListTile(
                          title: Text(filteredStates[index]),
                          onTap: () {
                            Navigator.pop(context, filteredStates[index]);
                          },
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      );
    },
  );
}





  List<Widget> _buildBrandSection(dynamic brands,
      {required Function(String) onBrandSelected}) {
    // Check if brands is a List<String>
    if (brands is List<String>) {
      return brands.map((brand) {
        return ListTile(
          title: Text(brand),
          onTap: () {
            onBrandSelected(brand);
          },
        );
      }).toList();
    }
    // If brands is a Map, try to extract a List from it
    else if (brands is Map) {
      // Check if the Map contains a key with a List of brands
      if (brands.containsKey('brands') && brands['brands'] is List) {
        return (brands['brands'] as List).map((brand) {
          return ListTile(
            title: Text(brand.toString()),
            onTap: () {
              onBrandSelected(brand.toString());
            },
          );
        }).toList();
      } else {
        debugPrint(
            'Error: Expected List<String> or Map with key "brands", but got $brands');
        return []; // Return an empty list to avoid crashing
      }
    }
    // Handle other cases
    else {
      debugPrint(
          'Error: Expected List<String> or Map, but got ${brands.runtimeType}');
      return []; // Return an empty list to avoid crashing
    }
  }

  void _showOwnershipSnackBar(BuildContext context) {
  showModalBottomSheet(
    context: context,
    builder: (BuildContext context) {
      return StatefulBuilder(
        builder: (context, setState) {
          return Container(
            padding: EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                Text(" Number of Owners",
                 style: TextStyle(
                                        fontSize: 20,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.blue[900],
                                      ),
                ),
                SizedBox(height: 16),
                _buildOwnershipTile(context, " First", setState),
                _buildOwnershipTile(context, " Second", setState),
                _buildOwnershipTile(context, " Third", setState),
                _buildOwnershipTile(context, " Fourth", setState),
            
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: Text("Cancel",style:TextStyle(color:Colors.red)),
                ),
              ],
            ),
          );
        },
      );
    },
  );
}
Widget _buildOwnershipTile(BuildContext context, String ownerType, StateSetter setState) {
  return ListTile(
    title: Text(ownerType),
    trailing: Icon(Icons.arrow_forward_ios),
    onTap: () {
      setState(() {
        controllers['ownerType']?.text = ownerType; // Use the null-aware operator ?.
      });
      Navigator.pop(context);
    },
  );
}

// Future<void> _pickImages() async {
//   try {
//     final List<XFile> pickedFiles = await _picker.pickMultiImage();
//     if (pickedFiles.isNotEmpty) {
//       setState(() {
//         _images.addAll(
//           pickedFiles.map((file) => File(file.path)).toList(),
//         );
//         if (_images.length > maxImages) {
//           _images = _images.sublist(0, maxImages);
//           ScaffoldMessenger.of(context).showSnackBar(
//             SnackBar(content: Text('Maximum $maxImages images allowed')),
//           );
//         }
//       });
//     }
//   } catch (e) {
//     ScaffoldMessenger.of(context).showSnackBar(
//       SnackBar(content: Text('Error picking images: $e')),
//     );
//   }
// }



// Future<void> _pickVideo() async {
//   try {
//     final XFile? pickedVideo = await _picker.pickVideo(
//       source: ImageSource.gallery,
//       maxDuration: const Duration(minutes: 5),
//     );
//     if (pickedVideo != null) {
//       _video = File(pickedVideo.path);
//       _videoController = VideoPlayerController.file(_video!)
//         ..initialize().then((_) {
//           setState(() {});
//         });
//       setState(() {});
//     }
//   } catch (e) {
//     ScaffoldMessenger.of(context).showSnackBar(
//       SnackBar(content: Text('Error picking video: $e')),
//     );
//   }
// }


// void _toggleVideo() {
//   if (_videoController != null) {
//     setState(() {
//       _videoController!.value.isPlaying
//           ? _videoController!.pause()
//           : _videoController!.play();
//     });
//   }
// }

// void _removeVideo() {
//   setState(() {
//     _video = null;
//     _videoController?.dispose();
//     _videoController = null;
//   });
// }

 @override
  void dispose() {
    controllers.forEach((_, controller) => controller.dispose());
    //  _videoController?.dispose();
    super.dispose();
  }
@override
void initState() {
  super.initState();
  
  controllers = {
    'category': TextEditingController(text: widget.category),
   
    'title': TextEditingController(),
    'city': TextEditingController(),
    'price': TextEditingController(),
    'condition': TextEditingController(),
    'thumb': TextEditingController(),
    'description': TextEditingController(),
    'brand': TextEditingController(),
    'year': TextEditingController(),

    'ownerType': TextEditingController(),
    'fuelType': TextEditingController(),
    'transmission': TextEditingController(),
    'make':TextEditingController(),
    "model":TextEditingController(),
     'state': TextEditingController(),
     'location': TextEditingController(),
   
    //  'mileage': TextEditingController(),



     "pet_category":TextEditingController(),
     "breed":TextEditingController(),
     "vaccinationType":TextEditingController(),

  };
}






void _submitForm() async {
  
  FocusScope.of(context).unfocus();

  if (_formKey.currentState!.validate()) {
      setState(() {
      isLoading = true;
    });
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token');
      
      // Get user data and parse active subscription
      final userData = prefs.getString('user_data');
      if (userData != null) {
        final userDataMap = json.decode(userData);
        String activeSubscription = userDataMap['active_subscription'] ?? '';
        
        // Extract the package ID (part before ::)
        String packageId = activeSubscription.split('::')[0];
        
        // Save the correct package ID instead of the default one
        if (packageId.isNotEmpty) {
          await prefs.setString('active_subscription', packageId);
        } else {
          // Only use default free package if no active subscription exists
          await prefs.setString('active_subscription', '678f2d327f36cdf7fba13595');
        }
      }

      // Parse price and year
      int price = 0;
      int year = 0;

      try {
        price = int.parse(controllers['price']?.text ?? '0');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please enter a valid price number')),
        );
        return;
      }

      try {
        year = int.parse(controllers['year']?.text ?? '0');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please enter a valid year number')),
        );
        return;
      }

      Map<String, dynamic> formData = {
        'title': controllers['title']?.text?.trim() ?? '',
        'city': controllers['city']?.text?.trim() ?? '',
        'category': widget.category,
        'price': price,
        'condition': controllers['condition']?.text?.trim() ?? '',
        'thumb': 'https://loremflickr.com/500/300/fish',
        'description': controllers['description']?.text?.trim() ?? '',
        'make': controllers['brand']?.text?.trim() ?? '',
        'model': controllers['title']?.text?.trim() ?? '',
        'year': year,
        'ownerType': controllers['ownerType']?.text?.trim() ?? '',
        'fuelType': controllers['fuelType']?.text?.trim() ?? '',
        'transmission': controllers['transmission']?.text?.trim() ?? '',
        'state':controllers['state']?.text?.trim() ?? '',
        'location':controllers['location']?.text?.trim() ?? '',
        'brand': controllers['brand']?.text?.trim() ?? '',
        // 'mileage': int.parse(controllers['mileage']?.text ?? '0'),


        'pet_category':controllers['category']?.text?.trim() ?? '',
        'breed':controllers['title']?.text?.trim() ?? '',
        'vaccinationType':controllers['vaccinationType']?.text?.trim() ?? '',
        
        
      };

      final response = await http.post(
        Uri.parse('http://13.200.179.78/adposts'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: json.encode(formData),
      );
  setState(() {
        isLoading = false;
      });
      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          final Map<String, dynamic> responseData = json.decode(response.body);
          print('Parsed response data: $responseData');

          // Check for adpost ID in different possible locations
          String? adpostId;
          if (responseData.containsKey('_id')) {
            adpostId = responseData['_id'].toString();
          } else if (responseData.containsKey('id')) {
            adpostId = responseData['id'].toString();
          } else if (responseData.containsKey('adpost_id')) {
            adpostId = responseData['adpost_id'].toString();
          } else if (responseData.containsKey('data') && responseData['data'] is Map) {
            final data = responseData['data'] as Map<String, dynamic>;
            adpostId = data['_id']?.toString() ?? data['id']?.toString();
          }

          if (adpostId != null && adpostId.isNotEmpty) {
            // Save to SharedPreferences
            await prefs.setString('adpostId', adpostId);
            print('Successfully saved adpostId: $adpostId');
 // Check if widget is still mounted
            if (!mounted) return;
            setState(() {
              _isSubmitDisabled = true;
              _isFormReadOnly = true;
            });

            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Ad posted successfully!')),
            );

            // Verify the save
            final savedId = await prefs.getString('adpostId');
            print('Verification - Retrieved adpostId: $savedId');
            
            // Navigate to UploadingScreen
            if (!mounted) return;
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => const UploadingScreen(
                 
                ),
              ),
            );
            
          }
          
           else {
             // Check if widget is still mounted
            if (!mounted) return;
            print('Response data structure: $responseData');
            throw Exception('Could not find adpost ID in response');
          }
        } catch (e) {
           // Check if widget is still mounted
            if (!mounted) return;
          print('Error parsing response: $e');
          throw Exception('Error processing server response: $e');
        }
      } 
//       else {
//  // Check if widget is still mounted
//             if (!mounted) return;
//         print('Server error response: ${response.body}');
     
//       }
//     } catch (e) {
//        // Check if widget is still mounted
//             if (!mounted) return;
//       print('Error in _submitForm: $e');
    
//     }
//   }
// }
else if (response.statusCode == 401) {
        // Add this new condition for subscription limit
        final errorResponse = json.decode(response.body);
        if (!mounted) return;
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Subscription Limit Reached Take New Subscription',
              style: TextStyle(
                color: Colors.red,
                fontWeight: FontWeight.bold,
                fontSize: 18,

              )
              
              ),
              content: Text(errorResponse['message'] ?? 'Subscription limit reached'),
              actions: <Widget>[
                TextButton(
                  child: const Text('OK'),
                  onPressed: () {
                     Navigator.of(context).pushAndRemoveUntil(
  MaterialPageRoute(builder: (context) => const PackageScreen()), // New route
  (route) => false, // Predicate to stop removal (but returns false, so all are removed)
);
                  },
                ),
              ],
            );
          },
        );
      } else {
        // Keep your existing error handling
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: ${response.body}'),
          ),
        );
      }
    } catch (e) {
      setState(() {
        isLoading = false;
      });
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error: $e'),
        ),
      );

    }
  }
}



void checkActiveSubscription() async {
  final prefs = await SharedPreferences.getInstance();
  final userData = prefs.getString('user_data');
  if (userData != null) {
    final userDataMap = json.decode(userData);
    print('Active Subscription: ${userDataMap['active_subscription']}');
    print('Subscription Rules: ${userDataMap['active_subscription_rules']}');
  }
}


// Helper function to retrieve adpostId
Future<String?> getAdpostId() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString('adpostId');
}





  @override
  Widget build(BuildContext context) {
      
    return Scaffold(
      backgroundColor: Colors.teal.shade50,
      appBar: AppBar(
        backgroundColor: Colors.deepPurple.shade200,
        title: Text('Post in ${widget.subcategory}',

        style: TextStyle(
          color: Colors.black,
          fontFamily: 'Roboto',
          fontStyle: FontStyle.italic,
          decoration: TextDecoration.underline,
          decorationColor: Colors.black,
          decorationStyle: TextDecorationStyle.solid,

          fontWeight: FontWeight.bold,
          fontSize: 18,
          

        )
        
        
        ),
         automaticallyImplyLeading: true, // Disable back button
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Add form fields based on category and subcategory
              _buildFormFields(),
              SizedBox(height: 20),
              //  _buildMediaUploadSection(),
                 SizedBox(height: 20),

ElevatedButton(
 
  onPressed: _isSubmitDisabled ? null : _submitForm,
  child: Text('Submit',

  ),
  style: ElevatedButton.styleFrom(
    backgroundColor: _isSubmitDisabled ? Colors.red : null, // Optional: visual feedback
  
    minimumSize: Size(double.infinity, 50),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(200),
    ),

  ),
 
),


              SizedBox(height: 20),
             
      






            ],
          ),
        ),
      ),
    );
  }



  Widget _buildFormFields() {
    // Return different form fields based on category and subcategory
    switch (widget.category) {
      case 'Cars':
        return _buildCarsForm();
      case 'Property':
        return _buildPropertyForm();
      case 'Mobiles':
        return _buildMobilesForm();
         case 'Jobs':
        return _buildJobForm();
        case 'Bikes':
         return _buildBikesForm();
         case 'Fashion':
        return _buildFashionForm();
        case 'Electronics & Appliances':
        return _buildElectronicsAppliancesForm();
        case 'Services':
        return _buildServicesForm();
        case 'Books, Sports & Hobbies':
        return _buildBooksSportsHobbiesForm();
          case 'Commercial Vehicles & Spares':
        return _buildCommercialVehiclesSparesForm();
        case 'Pets':
        return _buildPetsForm();

      default:
        return _buildDefaultForm();
    }
  }

  Widget _buildPropertyForm() {
   
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['thumb'],
          decoration:
              InputDecoration(labelText: 'thumb', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['condition'],
          decoration:
              InputDecoration(labelText: 'condition', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
          TextFormField(
             controller: controllers['Category'],
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'category',
            hintText:
                'category of your item',border: OutlineInputBorder(),
          
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a category';
            }
            return null;
          },
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['title'],
          decoration: InputDecoration(labelText: 'Title',
            hintText:
                'Mention the key features of your item (e.g. brand, model, age, type)',
          
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a title';
            }
            return null;
          },
        ),
        SizedBox(height: 20),
TextFormField(
  controller: controllers['price'],
   readOnly: _isFormReadOnly, // Add this line
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter price';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid number';
    }
    return null;
  },
),
  SizedBox(height: 20),
TextFormField(
  controller: controllers['year'],
   readOnly: _isFormReadOnly, // Add this line
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'year *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter year';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid year';
    }
    return null;
  },
),

SizedBox(height: 20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'BHK'),
         
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter number of BHK';
            }
            return null;
          },
        ),
        SizedBox(height: 20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Bathrooms'),
          keyboardType: TextInputType.number,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter number of Bathrooms';
            }
            return null;
          },
        ),
        SizedBox(height: 20),
       TextFormField(
         readOnly: _isFormReadOnly, // Add this line
          // readOnly: true,
          controller: TextEditingController(text: selectedFurnishing),
          decoration: InputDecoration(
            labelText: 'Furnishing *',
            suffixIcon: Icon(Icons.arrow_drop_down),
          ),
          onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (BuildContext context) {
                return Container(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      ListTile(
                        title: Text('Furnishing Status'),
                        trailing: IconButton(
                          icon: Icon(Icons.close),
                          onPressed: () => Navigator.pop(context),
                        ),
                      ),
                      Divider(),
                      ListTile(
                        title: Text('Furnished'),
                        onTap: () {
                          setState(() {
                            selectedFurnishing = 'Furnished';
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Furnished'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        title: Text('Semi-Furnished'),
                        onTap: () {
                          setState(() {
                            selectedFurnishing = 'Semi-Furnished';
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Semi-Furnished'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        title: Text('Unfurnished'),
                        onTap: () {
                          setState(() {
                            selectedFurnishing = 'Unfurnished';
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Unfurnished'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                    ],
                  ),
                );
              },
            );
          },
          validator: (value) {
            if (value == null || value.isEmpty || value == 'Furnishing') {
              return 'Please select furnishing status';
            }
            return null;
          },
        ),
        SizedBox(height:20),
        //     TextFormField(
        //        readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Super Buildup area sqft *'),
        //   validator: (value) {
        //     if (value == null || value.isEmpty) {
        //       return 'Please enter a Super Buildup area sqft';
        //     }
        //     return null;
        //   },
        // ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'area *'),
        
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter Carpet area sqft';
            }
            return null;
          },
        ),
        SizedBox(height:20),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Maintenance(Monthly)'),
        
        ),
SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'floorNumber'),
          keyboardType: TextInputType.number,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter number of  Floor';
            }
            return null;
          },
        ),
        SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Car Parking'),
          keyboardType: TextInputType.text,
         
        ),
          SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'totalFloors'),
          keyboardType: TextInputType.number,
        
        ),
          SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Facing'),
          keyboardType: TextInputType.text,
         
        ),
        
          SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Project Name'),
         
        ),
  SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
            controller: controllers['location'],
          decoration: InputDecoration(labelText: 'Location'),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a location';
            }
            return null;
          },
        ),
          SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
            controller: controllers['city'],
          decoration: InputDecoration(labelText: 'city'),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a city';
            }
            return null;
          },
        ),
          SizedBox(height:20),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'state'),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a State';
            }
            return null;
          },
        ),
  SizedBox(height:20),

        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
        // readOnly: true, // Make it read-only since we'll use bottom sheet
        controller: TextEditingController(text: selectedType), // Add controller
        decoration: InputDecoration(
          labelText: 'Type *',
          suffixIcon: Icon(Icons.arrow_drop_down),
        ),
        onTap: () {
          // Show bottom sheet when field is tapped
          showModalBottomSheet(
            context: context,
            builder: (BuildContext context) {
              return Container(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    ListTile(
                      title: Text('Property Type'),
                      trailing: IconButton(
                        icon: Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ),
                    Divider(),
                    ListTile(
                      title: Text('Flats/Apartments'),
                      onTap: () {
                        setState(() {
                          selectedType = 'Flats/Apartments';
                        });
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Selected: Flats/Apartments'),
                            duration: Duration(seconds: 2),
                          ),
                        );
                        Navigator.pop(context);
                      },
                    ),
                    ListTile(
                      title: Text('Independent / Builder Floors'),
                      onTap: () {
                        setState(() {
                          selectedType = 'Independent / Builder Floors';
                        });
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Selected: Independent / Builder Floors'),
                            duration: Duration(seconds: 2),
                          ),
                        );
                        Navigator.pop(context);
                      },
                    ),
                    ListTile(
                      title: Text('Farm House'),
                      onTap: () {
                        setState(() {
                          selectedType = 'Farm House';
                        });
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Selected: Farm House'),
                            duration: Duration(seconds: 2),
                          ),
                        );
                        Navigator.pop(context);
                      },
                    ),
                    ListTile(
                      title: Text('House & Villa'),
                      onTap: () {
                        setState(() {
                          selectedType = 'House & Villa';
                        });
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Selected: House & Villa'),
                            duration: Duration(seconds: 2),
                          ),
                        );
                        Navigator.pop(context);
                      },
                    ),
                  ],
                ),
              );
            },
          );
        },
        validator: (value) {
          if (value == null || value.isEmpty || value == 'Type') {
            return 'Please select a property type';
          }
          return null;
        },
      ),
       SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          //  readOnly: true,
          controller: TextEditingController(text: selectedListed),
          decoration: InputDecoration(
            labelText: 'Listed by *',
            suffixIcon: Icon(Icons.arrow_drop_down),
          ),
          onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (BuildContext context) {
                return Container(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      ListTile(
                        title: Text('Listed By'),
                        trailing: IconButton(
                          icon: Icon(Icons.close),
                          onPressed: () => Navigator.pop(context),
                        ),
                      ),
                      Divider(),
                      ListTile(
                        title: Text('Builder'),
                        onTap: () {
                          setState(() {
                            selectedListed = 'Builder'; 
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Builder'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        title: Text('Dealer'),
                        onTap: () {
                          setState(() {
                            selectedFurnishing = 'Dealer';
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Dealer'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        title: Text('Owner'),
                        onTap: () {
                          setState(() {
                            selectedFurnishing = 'Owner';
                          });
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Selected: Owner'),
                              duration: Duration(seconds: 2),
                            ),
                          );
                          Navigator.pop(context);
                        },
                      ),
                    ],
                  ),
                );
              },
            );
          },
          validator: (value) {
            if (value == null || value.isEmpty || value == 'Listed by') {
              return 'Please select Listed by';
            }
            return null;
          },
        ),

          SizedBox(height:20),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
            controller: controllers['description'],
          decoration: InputDecoration(labelText: 'description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a description';
            }
            return null;
          },
        ),
        // Add more form fields as needed
        SizedBox(height: 20),
      ],
    );
  }

  Widget _buildMobilesForm() {
    // Add mobile-specific form fields
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title',
            hintText:
                'Mention the key features of your item (e.g. brand, model, age, type)',
          ),
        ),
  TextFormField(
  readOnly: _isFormReadOnly, // Add this line
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter price';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid number';
    }
    return null;
  },
),


        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          // readOnly: true,
          controller: TextEditingController(text: selectedBrand),
          decoration: InputDecoration(
            labelText: 'brand *',
            suffixIcon: Icon(Icons.arrow_drop_down),
          ),
          onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (BuildContext context) {
                return Container(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        ListTile(
                          title: Text('Popular Brands'),
                          trailing: IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () => Navigator.pop(context),
                          ),
                        ),
                        Divider(),
                        // Popular Brands
                        ListTile(
                          title: Text('Apple'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Apple';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Apple'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Samsung'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Samsung';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Samsung'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('OnePlus'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'OnePlus';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: OnePlus'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        Divider(),
                        ListTile(
                          title: Text('All Brands'),
                          dense: true,
                        ),
                        // All Brands
                        ListTile(
                          title: Text('Asus'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Asus';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Asus'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('BlackBerry'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'BlackBerry';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: BlackBerry'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Google'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Google';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Google'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('HTC'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'HTC';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: HTC'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Huawei'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Huawei';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Huawei'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Lenovo'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Lenovo';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Lenovo'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('LG'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'LG';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: LG'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Motorola'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Motorola';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Motorola'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Nokia'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Nokia';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Nokia'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Realme'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Realme';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Realme'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Vivo'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Vivo';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Vivo'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Xiaomi'),
                          onTap: () {
                            setState(() {
                              selectedBrand = 'Xiaomi';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Xiaomi'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          },
          validator: (value) {
            if (value == null || value.isEmpty || value == 'Brand') {
              return 'Please select a brand';
            }
            return null;
          },
        ),
        SizedBox(height: 16.0),
        TextFormField(
       readOnly: _isFormReadOnly, // Add this line
          decoration:
              InputDecoration(labelText: 'RAM', border: OutlineInputBorder()),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a description';
            }
            return null;
          },
        ),

        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),


        // Add mobile-specific fields
      ],
    );
  }
  Widget _buildJobForm(){
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
            // readOnly: true,
          controller: TextEditingController(text: selectedPeriod),
          decoration: InputDecoration(labelText: 'Salary Period *',
          suffixIcon: Icon(Icons.arrow_drop_down),
          
          ),
            onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (BuildContext context) {
                return Container(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        ListTile(
                          title: Text('Salary Period'),
                          trailing: IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () => Navigator.pop(context),
                          ),
                        ),
                        Divider(),
                        // Popular Brands
                        ListTile(
                          title: Text('Hourly'),
                          onTap: () {
                            setState(() {
                              selectedPeriod = 'Hourly';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Hourly'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Monthly'),
                          onTap: () {
                            setState(() {
                              selectedPeriod = 'Monthly';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Monthly'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Weekly'),
                          onTap: () {
                            setState(() {
                              selectedPeriod = 'Weekly';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Weekly'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                   
                       
                     
                        ListTile(
                          title: Text('Yearly'),
                          onTap: () {
                            setState(() {
                              selectedPeriod = 'Yearly';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Yearly'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                       
                      ],
                    ),
                  ),
                );
              },
            );
          },
           validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a Period';
            }
            return null;
          },
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          //  readOnly: true,
          controller: TextEditingController(text: selectedPosition),
          decoration: InputDecoration(labelText: 'Position Type *',
  suffixIcon: Icon(Icons.arrow_drop_down),
          
          
          ),
          
        onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (BuildContext context) {
                return Container(
                  child: SingleChildScrollView(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        ListTile(
                          title: Text('Position type'),
                          trailing: IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () => Navigator.pop(context),
                          ),
                        ),
                        Divider(),
                        // Popular Brands
                        ListTile(
                          title: Text('Hourly'),
                          onTap: () {
                            setState(() {
                              selectedPosition = 'Contract';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Contract'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Full-time'),
                          onTap: () {
                            setState(() {
                              selectedPosition = 'Full-time';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Full-time'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                        ListTile(
                          title: Text('Part-time'),
                          onTap: () {
                            setState(() {
                              selectedPosition = 'Part-time';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Part-time'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                   
                       
                     
                        ListTile(
                          title: Text('Tempory'),
                          onTap: () {
                            setState(() {
                              selectedPosition = 'Tempory';
                            });
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Selected: Tempory'),
                                duration: Duration(seconds: 2),
                              ),
                            );
                            Navigator.pop(context);
                          },
                        ),
                       
                      ],
                    ),
                  ),
                );
              },
            );
          },
           validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a Position';
            }
            return null;
          },
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Salary From'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Salary to'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title',
          hintText: 'Include job title and company name',

          
          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),
      ],
    );
        
       
    
  }

  Widget _buildBikesForm() {
    return Column(
      children: [

        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['thumb'],
          decoration:
              InputDecoration(labelText: 'thumb', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
           controller: controllers['title'],
          decoration: InputDecoration(labelText: 'title',
            hintText:
                'Mention the key features of your item (e.g. brand, model, age, type)',
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a title';
            }
            return null;
          },
        ),
TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['condition'],
          decoration:
              InputDecoration(labelText: 'condition', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
TextFormField(
   readOnly: _isFormReadOnly, // Add this line



  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter price';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid number';
    }
    return null;
  },
),


        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'KM Driven'),
          keyboardType: TextInputType.number,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter KM Driven';
            }
            return null;
          },
        ),
     TextFormField(
       readOnly: _isFormReadOnly, // Add this line
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter year';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid year';
    }
    return null;
  },
),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
           controller: controllers['city'],
          decoration: InputDecoration(labelText: 'city'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'state'),
        ),
                TextFormField(
                   readOnly: _isFormReadOnly, // Add this line
          controller: controllers['fuelType'],
          // readOnly: true, // Make the field read-only to prevent manual input
          decoration: InputDecoration(
            labelText: 'fuelType',
            hintText: 'Select Fuel Type',
            suffixIcon: Icon(Icons.arrow_drop_down),
            border: OutlineInputBorder(),
          ),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
          onTap: () {

            // Show a modal bottom sheet with fuel type options
            showModalBottomSheet(
              context: context,
              isScrollControlled: true,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
              ),
              builder: (context) {
                return Container(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Title
                      Text(
                        'Select Fuel Type',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 16),

                      // List of fuel types
                      Expanded(
                        child: ListView(
                          children: [
                            ListTile(
                              title: Text('Petrol'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Petrol';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('LPG'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'LPG';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Electric'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Electric';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Diesel'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Diesel';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('CNG'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'CNG';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Hybrid'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Hybrid';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                          ],
                        ),
                      ),

                      // Cancel button
                      TextButton(
                        onPressed: () {
                          Navigator.pop(context); // Close the bottom sheet
                        },
                        child: Text(
                          'Cancel',
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
        // TextFormField(
        //   decoration: InputDecoration(labelText: 'fuelType'),
        // ),
           TextFormField(
             readOnly: _isFormReadOnly,
              // Add this line
              controller:controllers['category'],
          decoration: InputDecoration(labelText: 'category'),
        ),
        
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
      controller:controllers['description'],
          decoration: InputDecoration(labelText: 'description',
              hintText: 'Include condition, features and reason for selling',
          ),
          maxLines: 3,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a description';
            }
            return null;
          },
        ),
      ],
    );
}
Widget _buildCommercialVehiclesSparesForm(){
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'prise'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'city'),
        ),

 TextFormField(
   readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'State'),

        ),
        
 TextFormField(
   readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Category'),

        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title',
          hintText: 'A minimum length of Ten Charactrs required',

          
          ),
        ),
        
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),
      ],
    );

 
}

  Widget _buildFashionForm(){
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Prise'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'City'),
        ),

 TextFormField(
   readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'State'),

        ),
        
 TextFormField(
   readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Category'),

        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title',
          hintText: 'A minimum length of Ten Charactrs required',

          
          ),
        ),
        
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),
      ],
    );
  }
  
  Widget _buildBooksSportsHobbiesForm(){
    return Column(
      children: [
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'category'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'location'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'city'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'state'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'prise'),
        ),
         TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Condition'),
        ),

        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title'),
        ),

        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),
      ],
    );
  }
  Widget _buildElectronicsAppliancesForm(){
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'prise',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'category',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'city',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'state',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Condition',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'location',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'warranty',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description',
              hintText: 'Include condition, features and reason for selling',
          
          ),
          maxLines: 3,
        ),
      ],
    );

  }

  Widget _buildServicesForm() {
    return Column(
      children: [
          TextFormField(
             readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'city',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'state',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Type',

          ),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'location',

          ),
        ),

          TextFormField(
             readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Categoty'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description'),
          maxLines: 3,
        ),
      ],
    );
  }

   Widget _buildCarsForm() {
    return SingleChildScrollView(
    child:Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['thumb'],
          decoration:
              InputDecoration(labelText: 'thumb', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['title'],
          decoration: InputDecoration(
            labelText: 'Title *',
            hintText:
                'Mention the key features of your item (e.g. brand, model, age, type)',
            border: OutlineInputBorder(),
            // suffixIcon: Icon(Icons.star, color: Colors.red, size: 10),
          ),
          maxLines: 2,
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['city'],
          decoration:
              InputDecoration(labelText: 'city', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        // Usage in your form:
TextFormField(
  controller: controllers['state'], // Using t
  readOnly: true, // Make it read-only since we're using popup
  decoration: InputDecoration(
    labelText: 'State',
    hintText: 'Select State',
    prefixIcon: const Icon(Icons.location_city),
    suffixIcon: const Icon(Icons.arrow_drop_down),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
      controllers['state']?.text = selectedState;
      });
    }
  },
),

        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   controller: controllers['state'],
        //   decoration:
        //       InputDecoration(labelText: 'state', border: OutlineInputBorder()),
        //   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        // ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['location'],
          decoration: InputDecoration(
              labelText: 'location', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   controller: controllers['verifiedSeller'],
        //   decoration: InputDecoration(
        //       labelText: 'verifiedSeller', border: OutlineInputBorder()),
        //   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        // ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['category'],
          decoration: InputDecoration(
              labelText: 'category', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
 controller: controllers['condition'],
          decoration: InputDecoration(
              labelText: 'condition', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['description'],
          decoration: InputDecoration(
            labelText: 'Description *',
            hintText: 'Include condition, features and reason for selling',
            border: OutlineInputBorder(),
            // suffixIcon: Icon(Icons.star, color: Colors.red, size: 5),
          ),
          maxLines: 3,
          maxLength: 4000,
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
TextFormField(
   readOnly: _isFormReadOnly, // Add this line
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter price';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid number';
    }
    return null;
  },
),


        SizedBox(height: 10),


        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: TextFormField(
                 readOnly: _isFormReadOnly, // Add this line
                controller: controllers['brand'],
                // readOnly: true,
                decoration: InputDecoration(
                  labelText: 'Brand *',
                  hintText: 'Select Car Brand',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  suffixIcon: Icon(Icons.arrow_drop_down),
                ),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Required' : null,
                onTap: () {
                  showModalBottomSheet(
                    context: context,
                    isScrollControlled: true,
                    shape: RoundedRectangleBorder(
                      borderRadius:
                          BorderRadius.vertical(top: Radius.circular(20)),
                    ),
                    builder: (context) {
                      return Container(
                        padding: EdgeInsets.all(0),
                        height: MediaQuery.of(context).size.height * 0.9,
                        child: Column(
                          children: [
                            // Cancel button at the top
                            Container(
                              padding: EdgeInsets.symmetric(
                                  horizontal: 16, vertical: 8),
                              alignment: Alignment.centerRight,
                              child: TextButton(
                                onPressed: () => Navigator.pop(context),
                                child: Text(
                                  'Cancel',
                                  style: TextStyle(
                                    fontSize: 16,
                                    color: Colors.red,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                            Expanded(
                              child: Container(
                                padding: EdgeInsets.all(16),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Popular Brands',
                                      style: TextStyle(
                                        fontSize: 20,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.blue[900],
                                      ),
                                    ),
                                    SizedBox(height: 16),
                                    Expanded(
                                      child: ListView(
                                        children: [
                                          // Popular Brands Section
                                          ..._buildBrandSection([
                                            'Maruti Suzuki',
                                            'Hyundai',
                                            'Tata',
                                            'Mahindra',
                                            'Toyota',
                                            'Honda',
                                            'Volkswagen',
                                            'BMW',
                                            'Mercedes-Benz',
                                            'Audi',
                                            'Jaguar',
                                            'Porsche',
                                            'Lamborghini',
                                            'Ferrari',
                                            'Rolls-Royce',
                                            'Maserati',
                                            'Bugatti',
                                            'McLaren',
                                            'Fiat',
                                            'Ford',
                                            'Chevrolet',
                                            'Nissan',
                                            'Kia',
                                            'Suzuki',
                                            'Mitsubishi',
                                            'Subaru',
                                            'Land Rover',
                                            'Jeep',
                                            'Aston Martin',
                                            'Lexus',
                                            'MINI',
                                            'Volvo',
                                            'Daewoo',
                                            'Daihatsu',
                                            'Isuzu',
                                            'Mazda',
                                            'Perodua',
                                            'Proton',
                                            'SsangYong',
                                            'SsangYong',
                                            'Skoda',
                                            'Renault',
                                            'Geely',
                                            'Great Wall',
                                            'Haval',
                                            'JAC',
                                            'Lifan',
                                            'Nio',
                                            'Nissan',

                                            
                                          ], onBrandSelected: (brand) {
                                            if (controllers['brand'] != null) {
                                              controllers['brand']!.text =
                                                  brand;
                                            } else {
                                              debugPrint(
                                                  'Error: controllers["brand"] is null');
                                            }
                                            Navigator.pop(context);
                                          }),

                                          Divider(height: 32),
                                          Text(
                                            'All Brands',
                                            style: TextStyle(
                                              fontSize: 20,
                                              fontWeight: FontWeight.bold,
                                              color: Colors.blue[900],
                                            ),
                                          ),
                                          SizedBox(height: 16),

                                          // All Brands Section
                                          ..._buildBrandSection([
                                            'Ambassador',
                                            'Ashok Leyland',
                                            'Aston Martin',
                                            'Audi',
                                            'BYD',
                                            'Bajaj',
                                            'Bentley',
                                            'Citroen',
                                            'Lotus',
                                            'Tesla',
                                            'BMW',
                                            'Bugatti',
                                            'Cadillac',
                                            'Chevrolet',
                                            'Chrysler',
                                            'Daewoo',
                                            'Datsun',
                                            'DC',
                                            'Eicher Polaris',
                                            'Ferrari',
                                            'Fiat',
                                            'Force Motors',
                                            'Ford',
                                            'Honda',
                                            'Hummer',
                                            'Hyundai',
                                            'ICML',
                                            'ISUZU',
                                            'Jaguar',
                                            'Jeep',
                                            'Kia',
                                            'Lamborghini',
                                            'Land Rover',
                                            'Lexus',
                                            'Mahindra',
                                            'Mahindra Renault',
                                            'Maruti Suzuki'
                                          ], onBrandSelected: (brand) {
                                            if (controllers['brand'] != null) {
                                              controllers['brand']!.text =
                                                  brand;
                                            } else {
                                              debugPrint(
                                                  'Error: controllers["brand"] is null');
                                            }
                                            Navigator.pop(context);
                                          }),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),

        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['model'],
          keyboardType: TextInputType.text,
          decoration:
              InputDecoration(labelText: 'Model', border: OutlineInputBorder()),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        ),
        SizedBox(height: 10),
      TextFormField(
         readOnly: _isFormReadOnly, // Add this line
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year *',
    border: OutlineInputBorder(),
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter year';
    }
    if (int.tryParse(value) == null) {
      return 'Please enter a valid year';
    }
    return null;
  },
),
        SizedBox(height: 10),
       
        TextFormField(
        controller: controllers['mileage'],
        readOnly: _isFormReadOnly,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          labelText: 'Km Driven(Mileage) *',
          border: OutlineInputBorder(),
          hintText: 'Km Driven(Mileage)',
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please enter mileage';
          }
          if (int.tryParse(value) == null) {
            return 'Please enter a valid number';
          }
          return null;
        },
      ),
        SizedBox(height: 10),

        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   controller: controllers['inWarranty'],
        //   decoration: InputDecoration(
        //       labelText: 'In Warranty', border: OutlineInputBorder()),
        //   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
        // ),
 
        // Replace the transmission type text field with this:
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'transmission *',
              

              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[700],
                
              ),
              
            ),
            SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() {
                        controllers['transmission']?.text = 'Automatic';
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          controllers['transmission']?.text == 'Automatic'
                              ? Colors.blue
                              : Colors.grey[300],
                      foregroundColor:
                          controllers['transmission']?.text == 'Automatic'
                              ? Colors.white
                              : Colors.black,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Text('Automatic'),
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() {
                        controllers['transmission']?.text = 'Manual';
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          controllers['transmission']?.text == 'Manual'
                              ? Colors.blue
                              : Colors.grey[300],
                      foregroundColor:
                          controllers['transmission']?.text == 'Manual'
                              ? Colors.white
                              : Colors.black,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Text('Manual'),
                  ),
                ),
              ],
            ),
          ],
        ),
     
        SizedBox(height: 10),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          controller: controllers['fuelType'],
          // readOnly: true, // Make the field read-only to prevent manual input
          decoration: InputDecoration(
            labelText: 'fuelType',
            border: OutlineInputBorder(),
          ),
          validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
          onTap: () {
            // Show a modal bottom sheet with fuel type options
            showModalBottomSheet(
              context: context,
              isScrollControlled: true,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
              ),
              builder: (context) {
                return Container(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Title
                      Text(
                        'Select Fuel Type',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 16),

                      // List of fuel types
                      Expanded(
                        child: ListView(
                          children: [
                            ListTile(
                              title: Text('Petrol'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Petrol';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('LPG'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'LPG';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Electric'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Electric';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Diesel'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Diesel';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('CNG'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'CNG';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                            ListTile(
                              title: Text('Hybrid'),
                              trailing: Icon(Icons.arrow_forward),
                              onTap: () {
                                controllers['fuelType']?.text = 'Hybrid';
                                Navigator.pop(
                                    context); // Close the bottom sheet
                              },
                            ),
                          ],
                        ),
                      ),

                      // Cancel button
                      TextButton(
                        onPressed: () {
                          Navigator.pop(context); // Close the bottom sheet
                        },
                        child: Text(
                          'Cancel',
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        ),
       
        SizedBox(height: 10),
     TextFormField(
       readOnly: _isFormReadOnly, // Add this line
    controller: controllers['ownerType'],
    decoration: InputDecoration(
      labelText: 'ownerType',
      border: OutlineInputBorder(),
      suffixIcon: Icon(Icons.arrow_drop_down),
    ),
    
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
    onTap: () {
      _showOwnershipSnackBar(context); // Call the bottom sheet function
    },
    // readOnly: true, // Prevent direct text input
  ),
      ],
    ),
    );
  }
  Widget _buildPetsForm(){
    return Column(
      children: [
CustomTextFormField(
      labelText: 'Thumb',
      hintText: 'Please enter the thumb url',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['thumb']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.title,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
      prefixIcon: Icons.location_city,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
      prefixIcon: Icons.location_city,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
      prefixIcon: Icons.price_change,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
    ),
    const SizedBox(height: 10),


































         
//           Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['thumb'],
//   decoration: InputDecoration(
//     labelText: 'Thumb',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText:
//                 'Please enter the thumb url',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.search,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.star_border,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],

//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,


// ),
// ),


// SizedBox(height: 10),



//           Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['title'],
//   decoration: InputDecoration(
//     labelText: 'Title',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText:
//                 'Mention the key features of your item (e.g. brand, model, age, type)',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.search,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.star_border,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),







// SizedBox(height: 10),

//    Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['city'],
//   decoration: InputDecoration(
//     labelText: 'City',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter your city...',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.location_city,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.star_border,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),
          
    
//           SizedBox(height: 10),
        
       
        TextFormField(
  controller: controllers['state'], // Using t
  readOnly: true, // Make it read-only since we're using popup
  decoration: InputDecoration(
    labelText: 'State',
    hintText: 'Select State',
    prefixIcon: const Icon(Icons.location_city),
    suffixIcon: const Icon(Icons.arrow_drop_down),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
      controllers['state']?.text = selectedState;
      });
    }
  },
),
        SizedBox(height: 10),
//           Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['location'],
//   decoration: InputDecoration(
//     labelText: 'Location',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter your location',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.location_city,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.location_on,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),
         
//     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['vaccinationType'],
  decoration: InputDecoration(
    labelText: 'Vaccination Type',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
     
    ),
    hintText: 'Select Vaccination Type',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize:14.0,
    ),
    prefixIcon: Icon(
      Icons.vaccines,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
    child:  IconButton(
  icon: FaIcon(FontAwesomeIcons.syringe, color: Colors.white, size: 15),
  onPressed: () {
    // print("Syringe Icon Clicked!");
  },
)
      // child: Icon(
      //   Icons.star_border,
      //   color: Colors.white,
      //   size: 18,
      // ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
     shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
  
   
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
         
        
     
          
        
        
      
      
       
      
       
        SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'category',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
    hintText: 'Enter your pets category',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.pets,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.pets,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),






  Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['pet_category'],
  decoration: InputDecoration(
    labelText: 'Pet Category',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
    hintText: 'Enter your pet category',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
     Icons.pets,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.pets,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


SizedBox(height: 10),





        
      Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['breed'],
  decoration: InputDecoration(
    labelText: 'Breed',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
    hintText: 'Enter your city...',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
     Icons.pets,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.pets,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
       SizedBox(height: 10),

  Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
    hintText:'Enter Condition, e.g. New, Used, etc.',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.location_on,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),


// Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['make'],
//   decoration: InputDecoration(
//     labelText: 'Make',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter Make',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//      Icons.pets,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.pets,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),
       
      
      
        SizedBox(height: 10),

          Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(

  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
    hintText: 'Enter Year ',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.location_on,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
//           Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['model'],
//   decoration: InputDecoration(
//     labelText: 'Model',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter your model',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.location_city,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.location_on,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),
SizedBox(height: 10),

//  Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['price'],
//   keyboardType: TextInputType.number,
//   decoration: InputDecoration(
//     labelText: 'Price',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter your price',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//       Icons.location_city,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.location_on,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),









 SizedBox(height: 10),
       Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: [
        Colors.deepPurple[100]!,
        Colors.purple[200]!,
        Colors.deepPurple[200]!,
      ],
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
    ),
    borderRadius: BorderRadius.circular(40.0),
    boxShadow: [
      BoxShadow(
        color: Colors.deepPurple[200]!.withOpacity(0.3),
        blurRadius: 35.0,
        offset: Offset(0, 8),
      ),
    ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
   textInputAction: TextInputAction.done,
                    onEditingComplete: () {
                      FocusScope.of(context).unfocus();
                    },
  decoration: InputDecoration(
    labelText: 'Description',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      shadows: [
        Shadow(
          color: Colors.deepPurple[100]!,
          offset: Offset(0, 2),
          blurRadius: 4,
        ),
      ],
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    
   hintText: 'Include condition, features and reason for selling',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.description,
      color: Colors.deepPurple[400],
      size: 20,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
        style: BorderStyle.solid,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.star_border,
        color: Colors.white,
        size: 18,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
  
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto', // Custom font family
  ),
  cursorColor: Colors.deepPurple[400],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


 SizedBox(height: 10),
       
      //   TextFormField(
      //   controller: controllers['mileage'],
      //   readOnly: _isFormReadOnly,
      //   keyboardType: TextInputType.number,
      //   decoration: InputDecoration(
      //     labelText: 'contact number*',
      //     border: OutlineInputBorder(),
      //     hintText: 'Enter your contact number',
      //   ),
      //   validator: (value) {
      //     if (value == null || value.isEmpty) {
      //       return 'Please enter your contact number';
      //     }
      //     if (int.tryParse(value) == null) {
      //       return 'Please enter a valid number';
      //     }
      //     return null;
      //   },
      // ),
        SizedBox(height: 10),


    
  

      ]
    );
  }




  Widget _buildDefaultForm() {
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description'),
          maxLines: 3,
        ),
      ],
    );
  }
}
