// screens/sell_subcategory_details_form_screen.dart
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:video_player/video_player.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:http_parser/http_parser.dart';
import 'package:provider/provider.dart';
import 'package:dio/dio.dart';
import 'package:mime/mime.dart';
// At the top of your file, add this import
import 'package:flutter_poc_v3/protected_screen.dart/uploading_screen.dart';
import 'package:flutter_poc_v3/public_screen.dart/login_screen.dart';
import 'package:flutter_poc_v3/protected_screen.dart/package_screen.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter_poc_v3/protected_screen.dart/custom_text_form_field.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:get/get.dart';
import 'dart:developer';

class SellSubcategoryDetailsFormScreen extends StatefulWidget {
  final String category;
  final String subcategory;
    final Color categoryColor;
 

  const SellSubcategoryDetailsFormScreen({
    Key? key,
    required this.category,
    required this.subcategory,
      required this.categoryColor,
   
  }) : super(key: key);

  @override
  State<SellSubcategoryDetailsFormScreen> createState() =>
      _SellSubcategoryDetailsFormScreenState();
}





class _SellSubcategoryDetailsFormScreenState
    extends State<SellSubcategoryDetailsFormScreen> {
  // Add this line at the top of your state class
  final String screenName = 'sell_subcategory_details_form_screen';

      late Map<String, TextEditingController> controllers;
     bool isLoading = false;  // Add this line
  final _formKey = GlobalKey<FormState>();
    String selectedType = 'Type'; // Add this line at the class level
  String selectedFurnishing = 'Furnishing'; // Add this variable
  String selectedListed="Listed by";
  String selectedBrand = 'Brand';
  String selectedPeriod='Salary Period';
  String selectedPosition='Position Type';

bool _isFormReadOnly = false;
bool _isSubmitDisabled = false;
bool _isTitleEditable = false;  // Add this at class level

final List<String> ownerTypes = [
  'First Owner',
  'Second Owner',
  'Third Owner',
];
// First, add this list for fuel types
final List<String> fuelTypes = [
  'Petrol',
  'Diesel',
  'CNG',
  'Electric',
  'Hybrid',
  'LPG'
];
// First, add this list for property types
final List<Map<String, String>> propertyTypes = [
  {'id': '1', 'name': 'Flat/Apartment'},
  {'id': '2', 'name': 'Individual House/Villa'},
  {'id': '3', 'name': 'Independent Floor'},
  {'id': '4', 'name': 'Duplex'},
  {'id': '5', 'name': 'Penthouse'},
];

// First, add this list for furnishing types
final List<Map<String, dynamic>> furnishingTypes = [
  {
    'id': '1',
    'name': 'Fully Furnished',
    'icon': Icons.chair,
    'description': 'Comes with all furniture and appliances'
  },
  {
    'id': '2',
    'name': 'Semi Furnished',
    'icon': Icons.chair_outlined,
    'description': 'Basic furniture and fittings included'
  },
  {
    'id': '3',
    'name': 'Unfurnished',
    'icon': Icons.crop_square,
    'description': 'No furniture included'
  }
];
// Add this helper function for fuel type icons
IconData _getFuelTypeIcon(String fuelType) {
  switch (fuelType.toLowerCase()) {
    case 'petrol':
      return Icons.local_gas_station;
    case 'diesel':
      return Icons.local_gas_station;
    case 'cng':
      return Icons.waves;
    case 'electric':
      return Icons.electric_car;
    case 'hybrid':
      return Icons.electric_car;
    case 'lpg':
      return Icons.local_gas_station;
    default:
      return Icons.local_gas_station;
  }
}
// First, add this map for title-brand mapping
final Map<String, List<String>> titleBrandMap = {
  'Cars': ['Toyota', 'Honda', 'BMW', 'Mercedes', 'Audi', 'Hyundai', 'Ford'],
  'Bikes': ['Hero', 'Honda', 'Yamaha', 'KTM', 'Royal Enfield', 'Bajaj'],
  'Trucks': ['Ashok Leyland', 'Tata', 'Eicher', 'Mahindra', 'Volvo', 'BharatBenz'],
  'Honda': ['City', 'Civic', 'Accord', 'CR-V', 'Amaze',
  'Shine', 'Activa', 'Dream Yuga', 'Aviator', 'CBR 250R', 'CBR 1000RR','Activa 6G',
  'Activa 5G', 'Activa 4G', 'Activa 3G', 'Activa 2G', 'Activa 1G', 'Activa 0G','Honda SP 125'
  ],
  'Commercial Vehicles': ['Tata', 'Ashok Leyland', 'Mahindra', 'Eicher', 'BharatBenz'],
  'Scooters': ['Honda', 'TVS', 'Suzuki', 'Hero', 'Yamaha', 'Vespa'],
  'Mobiles Phones': ['iPhone', 'Samsung', 'OnePlus', 'Realme', 'Motorola','Xiaomi', 'Vivo', 'Oppo', 'Nokia', 'Honor'],
  'Laptops': ['Dell', 'HP', 'Lenovo', 'Asus', 'Apple', 'Acer', 'MSI'],
  'Tablets': ['iPad', 'Samsung', 'Lenovo', 'Huawei', 'Microsoft', 'Fire'],
  'Cameras': ['Canon', 'Nikon', 'Sony', 'Fujifilm', 'GoPro', 'Panasonic' ],
  'Oppo':[
    'Find X3 Pro',],
    "Smart Watches":[
      "Apple Watch",
      "Samsung Galaxy Watch",
      "Fossil Gen 5",
      "Garmin Venu",
      "Fitbit Versa 3",
      "Amazfit GTS 2",
      "Xiaomi Mi Band 7",
      "Realme Watch 2",
      "OnePlus Watch",
      "Honor Watch GS 3"
    ],
  
  // Add more titles and brands as needed
};

final Map<String, List<String>> brandModelMap = {
  'Toyota': ['Camry', 'Corolla', 'Innova', 'Fortuner', 'Land Cruiser'],
  'Honda': ['City', 'Civic', 'Accord', 'CR-V', 'Amaze'],
  'BMW': ['3 Series', '5 Series', '7 Series', 'X1', 'X3', 'X5'],
  'Hyundai': ['i20', 'Creta', 'Venue', 'Verna', 'Tucson'],
  'Mercedes': ['A-Class', 'C-Class', 'E-Class', 'S-Class', 'GLA'],
  'Audi': ['A4', 'A6', 'Q3', 'Q5', 'Q7'],
  'Ford': ['EcoSport', 'Endeavour', 'Figo', 'Aspire'],
  'Mobiles': ['iPhone', 'Samsung', 'OnePlus', 'Realme', 'Motorola','Xiaomi', 'Vivo', 'Oppo', 'Nokia', 'Honor'],
  
  'Laptops': ['Dell', 'HP', 'Lenovo', 'Asus', 'Apple', 'Acer', 'MSI'],
  'Tablets': ['iPad', 'Samsung', 'Lenovo', 'Huawei', 'Microsoft', 'Fire'],
  'Cameras': ['Canon', 'Nikon', 'Sony', 'Fujifilm', 'GoPro', 'Panasonic' ],
  'Oppo':[
    'Find X3 Pro',],
    'Fitbit Versa 3':[
      'Amazfit GTS 2',
      'Xiaomi Mi Band 7',
      'Realme Watch 2',
      'OnePlus Watch',
      'Honor Watch GS 3'
    ]
  
  
 
  
  // Add more brands and models as needed
};



// Add this list at the top of your file for colors
final List<Map<String, dynamic>> colorOptions = [
  {'name': 'Metallic Black', 'hex': '#000000'},
  {'name': 'Pearl White', 'hex': '#FFFFFF'},
  {'name': 'Cosmic Grey', 'hex': '#808080'},
  {'name': 'Racing Red', 'hex': '#FF0000'},
  {'name': 'Ocean Blue', 'hex': '#0000FF'},
  {'name': 'Emerald Green', 'hex': '#008000'},
  {'name': 'Midnight Blue', 'hex': '#191970'},
  {'name': 'Silver', 'hex': '#C0C0C0'},
  {'name': 'Champagne Gold', 'hex': '#FFD700'},
  {'name': 'Bronze', 'hex': '#CD7F32'},
  {'name': 'Ruby Red', 'hex': '#E0115F'},
  {'name': 'Sapphire Blue', 'hex': '#0F52BA'},
  {'name': 'Amber Yellow', 'hex': '#FFBF00'},
  {'name': 'Lavender Purple', 'hex': '#E6E6FA'},
  {'name': 'Turquoise Green', 'hex': '#40E0D0'},
  {'name': 'Magenta Pink', 'hex': '#FF00FF'},
  {'name': 'Coral Orange', 'hex': '#FF7F50'},
  {'name': 'Lime Green', 'hex': '#32CD32'},
  {'name': 'Golden Brown', 'hex': '#DAA520'},
];

  // Add this method to load saved data
  // void _loadSavedData() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   setState(() {
  //     // controllers['title']?.text = prefs.getString('saved_title') ?? '';
  //     controllers['city']?.text = prefs.getString('saved_city') ?? '';
  //     controllers['price']?.text = prefs.getString('saved_price') ?? '';
  //     controllers['description']?.text = prefs.getString('saved_description') ?? '';
  //     controllers['location']?.text = prefs.getString('saved_location') ?? '';
  //     controllers['state']?.text = prefs.getString('saved_state') ?? '';
  //     // Add other fields as needed
  //   });
  // }

  // Add this method to save data
  // void _saveFormData() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   // await prefs.setString('saved_title', controllers['title']?.text ?? '');
  //   await prefs.setString('saved_city', controllers['city']?.text ?? '');
  //   await prefs.setString('saved_price', controllers['price']?.text ?? '');
  //   await prefs.setString('saved_description', controllers['description']?.text ?? '');
  //   await prefs.setString('saved_location', controllers['location']?.text ?? '');
  //   await prefs.setString('saved_state', controllers['state']?.text ?? '');
  //   // Add other fields as needed
  // }


// Clear saved data after successful form submission
  // void _clearSavedData() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   // await prefs.remove('saved_title');
  //   await prefs.remove('saved_city');
  //   await prefs.remove('saved_price');
  //   await prefs.remove('saved_description');
  //   await prefs.remove('saved_location');
  //   await prefs.remove('saved_state');
  //   // Add other fields as needed
  // }
  

  // First, add this map for city-location mapping
final Map<String, List<String>> cityLocationMap = {
  'Hyderabad': ['Ameerpet', 'Hitech City', 'Gachibowli', 'Kukatpally', 
  'Madhapur',' Banjara Hills', 'Secunderabad', 'Lal Darwaja', 'Nampally', 'Narayanguda', 'Ramanthapur', 'Saidabad', 'Shankar Nagar', 'Somajiguda',
   'St. George', 'Tarnaka', 'Uppal', 'Vanasthalipuram', 'Vijay Nagar', 'Yousufguda',
   'Miyapur'
  
  ],
  'Warangal': ['Hanamkonda', 'Kazipet', 'Warangal Fort', 'Pochamma Maidan'],
  'Karimnagar': ['Tower Circle', 'Kaman Road', 'Circuit House', 'Gandhi Road'],
  'Nizamabad': ['Kanteshwar', 'Dubba', 'Namdev Circle', 'Gandhi Chowk'],
  'Vijayawada': ['Kailaras', 'Chinna Tirumala', 'Gandhi Nagar', 'Ravindra Nagar'],
  'Visakhapatnam': ['Rajendra Nagar', 'Gajuwaka', 'Narayanaguda', 'Lakdikapool'],
  'Guntur': ['Guntur City', 'Guntur Rural', 'Guntur Urban'],
  'Nellore': ['Nellore City', 'Nellore Rural', 'Nellore Urban'],
  'Mumbai': ['Mumbai City', 'Mumbai Suburban', 'Navi Mumbai'],
  'Pune': ['Pune City', 'Pune Rural', 'Pune Urban'],
  'Nagpur': ['Nagpur City', 'Nagpur Rural', 'Nagpur Urban'],
  'Nuzvid':[
    'Nuzvid City', 'Nuzvid Rural', 'Nuzvid Urban'

  ]

  // Add more cities and locations as needed
};
// First, add this list for transmission types
final List<String> transmissionTypes = ['Manual', 'Automatic'];

// Add this function for location selection dialog
Future<String?> showLocationSelectionDialog(BuildContext context, String city) async {
  if (city.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Please select a city first'),
        duration: Duration(seconds: 2),
      ),
    );
    return null;
  }

  return showDialog<String>(
    context: context,
    builder: (BuildContext context) {
      final locations = cityLocationMap[city] ?? [];
      final searchController = TextEditingController();
      List<String> filteredLocations = List.from(locations);

      return StatefulBuilder(
        builder: (context, setState) {
          return AlertDialog(
            title: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Select Location in $city'),
                SizedBox(height: 10),
                TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search Location',
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    contentPadding: EdgeInsets.symmetric(horizontal: 15, vertical: 0),
                  ),
                  onChanged: (value) {
                    setState(() {
                      filteredLocations = locations
                          .where((location) => location.contains(value)) // Case sensitive search
                          .toList();
                    });
                  },
                ),
              ],
            ),
            content: Container(
              width: double.maxFinite,
              height: 300,
              child: ListView.builder(
                shrinkWrap: true,
                itemCount: filteredLocations.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    leading: Icon(Icons.location_on, color: Colors.blue[700]),
                    title: Text(filteredLocations[index]),
                    onTap: () {
                      Navigator.of(context).pop(filteredLocations[index]);
                    },
                  );
                },
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('Cancel'),
              ),
            ],
          );
        },
      );
    },
  );
}


// First, create a map of states and their cities
final Map<String, List<String>> stateCityMap = {

  'Telangana': ['Hyderabad', 'Warangal', 'Karimnagar', 'Nizamabad'],
  'Andhra Pradesh': ['Visakhapatnam', 'Vijayawada', 'Guntur', 'Nellore'],
  'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Thane'],
  'Karnataka': ['Bangalore', 'Mysuru', 'Hubli-Dharwad', 'Belagavi'],
  'Tamil Nadu': ['Chennai', 'Coimbatore', 'Madurai', 'Tiruchirappalli'],
  'Delhi': ['New Delhi', 'Gurgaon', 'Noida', 'Faridabad'],
  'Uttar Pradesh': ['Lucknow', 'Kanpur', 'Varanasi', 'Agra'],
  'Rajasthan': ['Jaipur', 'Udaipur', 'Jodhpur', 'Bikaner'],
  'Gujarat': ['Ahmedabad', 'Surat', 'Vadodara', 'Rajkot'],
  'Punjab': ['Chandigarh', 'Ludhiana', 'Jalandhar', 'Patiala'],
  'Haryana': ['Gurugram', 'Faridabad', 'Rohtak', 'Panipat'],
  'Bihar': ['Patna', 'Gaya', 'Bhagalpur', 'Muzaffarpur'],
  'West Bengal': ['Kolkata', 'Siliguri', 'Durgapur', 'Asansol'],
  'Odisha': ['Bhubaneswar', 'Cuttack', 'Rourkela', 'Brahmapur'],
  'Jharkhand': ['Ranchi', 'Dhanbad', 'Jamshedpur', 'Bokaro Steel City'],
  'Assam': ['Guwahati', 'Silchar', 'Dibrugarh', 'Nagaon'],
  'Kerala': ['Thiruvananthapuram', 'Kochi', 'Kozhikode', 'Calicut'],
  'Madhya Pradesh': ['Indore', 'Bhopal', 'Jabalpur', 'Gwalior'],
  'Chhattisgarh': ['Raipur', 'Bhilai', 'Raigarh', 'Durg'],
  'Jammu and Kashmir': ['Srinagar', 'Jammu', 'Ladakh', 'Udhampur'],
  'Uttarakhand': ['Dehradun', 'Roorkee', 'Haridwar', 'Nainital'],
  'Himachal Pradesh': ['Shimla', 'Dharamshala', 'Manali', 'Kasauli'],
  'Tripura': ['Agartala', 'Dharmanagar', 'Pratapgarh', 'Kailashahar'],
  'Meghalaya': ['Shillong', 'Guwahati', 'Tura', 'Nongstoin'],
  'Manipur': ['Imphal', 'Bishnupur', 'Thoubal', 'Ukhrul'],
  'Mizoram': ['Aizawl', 'Lunglei', 'Saiha', 'Champhai'],
  'Nagaland': ['Kohima', 'Dimapur', 'Zunheboto', 'Mokokchung'],
  'Sikkim': ['Gangtok', 'Pelling', 'Lachen', 'Gyalshing'],
  'Arunachal Pradesh': ['Itanagar', 'Naharlagun', 'Pasighat', 'Tawang'],
  'Chandigarh': ['Chandigarh', 'Mohali', 'Panchkula', 'Zirakpur'],
  'Goa': ['Panaji', 'Margao', 'Vasco da Gama', 'Mapusa'],
  'Lakshadweep': ['Kavaratti', 'Minicoy', 'Andrott', 'Kalpel'],
  'Dadra and Nagar Haveli': ['Silvasa', 'Dadra', 'Daman', 'Diu'],
  'Daman and Diu': ['Daman', 'Diu', 'Dadra', 'Silvasa'],
  'Puducherry': ['Pondicherry', 'Karaikal', 'Mahe', 'Yanam'],
  'Andaman and Nicobar Islands': ['Port Blair', 'Car Nicobar', 'Havelock', 'Diglipur'],
  'Ladakh': ['Leh', 'Kargil', 'Srinagar', 'Pangong Tso'],
  



  // Add more states and cities as needed
};

// Modify your showCitySelectionDialog function
Future<String?> showCitySelectionDialog(BuildContext context, String state) {
  if (state.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Please select State first'),
        duration: Duration(seconds: 2),
      ),
    );
    return Future.value(null);
  }

  final cities = stateCityMap[state] ?? [];
  final searchController = TextEditingController();
  List<String> filteredCities = List.from(cities);

  return showDialog<String>(
    context: context,
    builder: (BuildContext context) {
      return StatefulBuilder(
        builder: (context, setState) {
          return AlertDialog(
            title: Column(
              children: [
                Text(
                  'Select City in $state',
                  style: TextStyle(
                    color: Colors.blue[900],
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search City',
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    contentPadding: EdgeInsets.symmetric(horizontal: 15, vertical: 0),
                  ),
                  onChanged: (value) {
                    setState(() {
                      filteredCities = cities
                          .where((city) => city.contains(value)) // Case sensitive search
                          .toList();
                    });
                  },
                ),
              ],
            ),
            content: Container(
              width: double.maxFinite,
              height: 300,
              child: ListView.builder(
                itemCount: filteredCities.length,
                itemBuilder: (context, index) {
                  final city = filteredCities[index];
                  return ListTile(
                    leading: Container(
                      padding: EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        Icons.location_city,
                        color: Colors.blue[700],
                      ),
                    ),
                    title: Text(
                      city,
                      style: TextStyle(
                        fontWeight: FontWeight.w500,
                        color: Colors.grey[800],
                      ),
                    ),
                    onTap: () => Navigator.pop(context, city),
                    selected: controllers['city']?.text == city,
                    selectedTileColor: Colors.blue[50],
                  );
                },
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: Text(
                  'Cancel',
                  style: TextStyle(color: Colors.red),
                ),
              ),
            ],
          );
        },
      );
    },
  );
}



Future<String?> showStateSelectionDialog(BuildContext context) async {
  final TextEditingController searchController = TextEditingController();
  List<String> indianStates = [
    'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
    'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka',
    'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',
    'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu',
    'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal',
    'Andaman and Nicobar Islands', 'Chandigarh', 'Dadra and Nagar Haveli',
    'Daman and Diu', 'Delhi', 'Jammu and Kashmir', 'Ladakh', 'Lakshadweep',
    'Puducherry'
  ];
  List<String> filteredStates = indianStates;

  return showDialog<String>(
    context: context,
    builder: (BuildContext context) {
      return StatefulBuilder(
        builder: (context, setState) {
          return Dialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            child: Container(
              width: double.maxFinite,
              constraints: const BoxConstraints(maxHeight: 550),
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.deepPurple, Colors.pinkAccent],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 12,
                    offset: Offset(0, 6),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Select State',
                        style: GoogleFonts.poppins(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    

                      IconButton(
  icon: Container(
    decoration: BoxDecoration(
      shape: BoxShape.circle,
      gradient: LinearGradient(
        colors: [Colors.pinkAccent, Colors.deepPurpleAccent], // Stylish gradient
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
      boxShadow: [
        BoxShadow(
          color: Colors.black26,
          blurRadius: 8,
          offset: Offset(2, 4),
        ),
      ],
    ),
    padding: EdgeInsets.all(8), // Adds better touch area
    child: Icon(Icons.close_rounded, color: Colors.white, size: 24),
  ),
  onPressed: () => Navigator.pop(context),
),

                    ],
                  ),
                  const SizedBox(height: 10),
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white24,
                      borderRadius: BorderRadius.circular(14),
                    ),
                    child: TextField(
                      controller: searchController,
                      style: TextStyle(color: Colors.white, fontSize: 16),
                      decoration: InputDecoration(
                        hintText: 'Search State...',
                        hintStyle: TextStyle(color: Colors.white70),
                        prefixIcon: Icon(Icons.search_rounded, color: Colors.white),
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.symmetric(vertical: 14),
                      ),
                      onChanged: (value) {
                        setState(() {
                          filteredStates = indianStates
                              .where((state) => state.toLowerCase().contains(value.toLowerCase()))
                              .toList();
                        });
                      },
                    ),
                  ),
                  const SizedBox(height: 12),
                  Expanded(
                    child: ListView.builder(
                      itemCount: filteredStates.length,
                      itemBuilder: (context, index) {
                        return Card(
                          elevation: 5,
                          color: Colors.white.withOpacity(0.95),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 10),
                          child: ListTile(
                            leading: Icon(Icons.location_city_rounded, color: Colors.deepPurple),
                            title: Text(
                              filteredStates[index],
                              style: GoogleFonts.roboto(
                                fontSize: 17,
                                fontWeight: FontWeight.w600,
                                color: Colors.black87,
                              ),
                            ),
                            onTap: () {
                              Navigator.pop(context, filteredStates[index]);
                            },
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      );
    },
  );
}





  List<Widget> _buildBrandSection(dynamic brands,
      {required Function(String) onBrandSelected}) {
    // Check if brands is a List<String>
    if (brands is List<String>) {
      return brands.map((brand) {
        return ListTile(
          title: Text(brand),
          onTap: () {
            onBrandSelected(brand);
          },
        );
      }).toList();
    }
    // If brands is a Map, try to extract a List from it
    else if (brands is Map) {
      // Check if the Map contains a key with a List of brands
      if (brands.containsKey('brands') && brands['brands'] is List) {
        return (brands['brands'] as List).map((brand) {
          return ListTile(
            title: Text(brand.toString()),
            onTap: () {
              onBrandSelected(brand.toString());
            },
          );
        }).toList();
      } else {
        debugPrint(
            'Error: Expected List<String> or Map with key "brands", but got $brands');
        return []; // Return an empty list to avoid crashing
      }
    }
    // Handle other cases
    else {
      debugPrint(
          'Error: Expected List<String> or Map, but got ${brands.runtimeType}');
      return []; // Return an empty list to avoid crashing
    }
  }


Widget _buildOwnershipTile(BuildContext context, String ownerType, StateSetter setState) {
  return ListTile(
    title: Text(ownerType),
    trailing: Icon(Icons.arrow_forward_ios),
    onTap: () {
      setState(() {
        controllers['ownerType']?.text = ownerType; // Use the null-aware operator ?.
      });
      Navigator.pop(context);
    },
  );
}



 @override
  void dispose() {
    controllers.forEach((_, controller) => controller.dispose());
    //  _videoController?.dispose();
    super.dispose();
  }
@override
void initState() {
  super.initState();
    // _loadSavedData(); // Add this line
  controllers = {
    'category': TextEditingController(text: widget.category),
    'title': TextEditingController(text: widget.subcategory),  // Initialize with subcategory
    // 'title': TextEditingController(),
    'city': TextEditingController(),
    'price': TextEditingController(),
    'condition': TextEditingController(),
    'thumb': TextEditingController(),
    'description': TextEditingController(),
    'brand': TextEditingController(),
    'year': TextEditingController(),

    'ownerType': TextEditingController(),
    'fuelType': TextEditingController(),
    'transmission': TextEditingController(),
    'make':TextEditingController(),
    "model":TextEditingController(),
     'state': TextEditingController(),
     'location': TextEditingController(),
   
    //  'mileage': TextEditingController(),



     "pet_category":TextEditingController(),
     "breed":TextEditingController(),
     "vaccinationType":TextEditingController(),
     "product":TextEditingController(),
     'material': TextEditingController(),
      'dimensions': TextEditingController(),
      'electronics_category': TextEditingController(),
      'type': TextEditingController(),
      'area': TextEditingController(),
      'bedrooms': TextEditingController(),
      'bathrooms': TextEditingController(),
    'furnishing': TextEditingController(),
    'floorNumber': TextEditingController(),
    'totalFloors': TextEditingController(),
    'storage': TextEditingController(),
    'operatingSystem': TextEditingController(),
    'screenSize': TextEditingController(),
    'processor': TextEditingController(),
    'ram': TextEditingController(),
    'storageCapacity': TextEditingController(),
    'camera': TextEditingController(),
    'battery': TextEditingController(),
    'color': TextEditingController(),
    'warranty': TextEditingController(),
    'mileage': TextEditingController(),
    'hobby_category': TextEditingController(),
    'contact_info': TextEditingController(),
    'company': TextEditingController(),
    'industry': TextEditingController(),
    'position': TextEditingController(),
    'experienceLevel': TextEditingController(),
    'salary': TextEditingController(),
    'jobType': TextEditingController(),
    'qualifications': TextEditingController(),
    'fashion_category': TextEditingController(),
    'size': TextEditingController(),
 
  

    // Add other controllers as needed
   

   
     
  };
}






void _submitForm() async {
  if (!mounted) return;  // Add this check at the start
  FocusScope.of(context).unfocus();

  if (_formKey.currentState!.validate()) {
      setState(() {
      isLoading = true;
    });
    try {
          final currentContext = context;
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token');
       if (token == null) {
        await prefs.setString('saved_category', widget.category);
await prefs.setString('saved_subcategory', widget.subcategory);

await prefs.setString('saved_color', widget.categoryColor.value.toRadixString(16));
          await prefs.setString('previous_route', screenName);
        // Check if context is still valid
        if (!context.mounted) return;

        Get.snackbar(
          'Login Required',
          'Please login to continue',
          snackStyle: SnackStyle.FLOATING,
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor:
              const Color.fromARGB(255, 232, 235, 239).withOpacity(0.8),
          colorText: const Color.fromARGB(255, 12, 65, 0),
          margin: const EdgeInsets.all(10),
          duration: const Duration(seconds: 2),
        );

        // Use Get.to instead of Navigator
        // Get.to(() => const LoginScreen());
           // Use Navigator.push instead of Get.to to maintain the stack
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const LoginScreen()),
        );
        return;
      }


 
      final userData = prefs.getString('user_data');
      if (userData != null) {
        final userDataMap = json.decode(userData);
        String activeSubscription = userDataMap['active_subscription'] ?? '';
        
        // Extract the package ID (part before ::)
        String packageId = activeSubscription.split('::')[0];
        
        // Save the correct package ID instead of the default one
        if (packageId.isNotEmpty) {
          await prefs.setString('active_subscription', packageId);
        } else {
          // Only use default free package if no active subscription exists
          await prefs.setString('active_subscription', '678f2d327f36cdf7fba13595');
        }
      }

      // Parse price and year
      int price = 0;
      int year = 0;

      try {
        price = int.parse(controllers['price']?.text ?? '0');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please enter a valid price number')),
        );
        return;
      }

      try {
        year = int.parse(controllers['year']?.text ?? '0');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please enter a valid year number')),
        );
        return;
      }

      Map<String, dynamic> formData = {
         'title': controllers['title']?.text?.trim() ?? '',
        // 'title':widget.title,
        'city': controllers['city']?.text?.trim() ?? '',
        'category': widget.category,
        'price': price,
        'condition': controllers['condition']?.text?.trim() ?? '',
       
        'description': controllers['description']?.text?.trim() ?? '',
        'make': controllers['brand']?.text?.trim() ?? '',
        'model': controllers['title']?.text?.trim() ?? '',
        'year': year,
        'ownerType': controllers['ownerType']?.text?.trim() ?? '',
        'fuelType': controllers['fuelType']?.text?.trim() ?? '',
        'transmission': controllers['transmission']?.text?.trim() ?? '',
        'state':controllers['state']?.text?.trim() ?? '',
        'location':controllers['location']?.text?.trim() ?? '',
        'brand': controllers['brand']?.text?.trim() ?? '',
        'electronics_category': controllers['electronics_category']?.text?.trim() ?? '',
        // 'mileage': int.parse(controllers['mileage']?.text ?? '0'),


        'pet_category':controllers['category']?.text?.trim() ?? '',
        'breed':controllers['title']?.text?.trim() ?? '',
        'vaccinationType':controllers['vaccinationType']?.text?.trim() ?? '',
        'product':controllers['product']?.text?.trim() ?? '',
        'material':controllers['material']?.text?.trim() ?? '',
         'dimensions':controllers['dimensions']?.text?.trim() ?? '',
        'type':controllers['type']?.text?.trim() ?? '',
        'area':controllers['area']?.text?.trim() ?? '',
        'bedrooms':controllers['bedrooms']?.text?.trim() ?? '',
        'bathrooms':controllers['bathrooms']?.text?.trim() ?? '',
        'furnishing':controllers['furnishing']?.text?.trim() ?? '',
        'floorNumber':controllers['floorNumber']?.text?.trim() ?? '',
        'totalFloors':controllers['totalFloors']?.text?.trim() ?? '',
        'storage':controllers['storage']?.text?.trim() ?? '',
        'operatingSystem':controllers['operatingSystem']?.text?.trim() ?? '',
        'screenSize':controllers['screenSize']?.text?.trim() ?? '',
        'thumb':controllers['thumbnail']?.text?.trim() ?? '',
       
       
       
        'camera':controllers['camera']?.text?.trim() ?? '',
        'battery':controllers['battery']?.text?.trim() ?? '',
        'color':controllers['color']?.text?.trim() ?? '',
        'warranty':controllers['warranty']?.text?.trim() ?? '',
        'mileage':controllers['mileage']?.text?.trim() ?? '',
      
        'processor':controllers['processor']?.text?.trim() ?? '',
        'ram':controllers['ram']?.text?.trim() ?? '',
        'storageCapacity':controllers['storageCapacity']?.text?.trim() ?? '',
        'type':controllers['type']?.text?.trim() ?? '',
        'area':controllers['area']?.text?.trim() ?? '',
        'bedrooms':controllers['bedrooms']?.text?.trim() ?? '',
        'bathrooms':controllers['bathrooms']?.text?.trim() ?? '',
        'furnishing':controllers['furnishing']?.text?.trim() ?? '',
        'floorNumber':controllers['floorNumber']?.text?.trim() ?? '',
        'totalFloors':controllers['totalFloors']?.text?.trim() ?? '',
        'storage':controllers['storage']?.text?.trim() ?? '',
        'operatingSystem':controllers['operatingSystem']?.text?.trim() ?? '',
        'screenSize':controllers['screenSize']?.text?.trim() ?? '',
        'processor':controllers['processor']?.text?.trim() ?? '',
        'ram':controllers['ram']?.text?.trim() ?? '',
        'storageCapacity':controllers['storageCapacity']?.text?.trim() ?? '',
        'camera':controllers['camera']?.text?.trim() ?? '',
        'battery':controllers['battery']?.text?.trim() ?? '',
        'color':controllers['color']?.text?.trim() ?? '',
        'warranty':controllers['warranty']?.text?.trim() ?? '',
        'mileage':controllers['mileage']?.text?.trim() ?? '',
        'company':controllers['company']?.text?.trim() ?? '',
        'industry':controllers['industry']?.text?.trim() ?? '',
        'position':controllers['position']?.text?.trim() ?? '',
        
        //  'salary': controllers['salary']?.text?.trim() ?? '',
        'jobType': controllers['jobType']?.text?.trim() ?? '',
        'experienceLevel': controllers['experienceLevel']?.text?.trim() ?? '',
        'qualifications': controllers['qualifications']?.text?.trim() ?? '',
        'contact_info': controllers['contact_info']?.text?.trim() ?? '',
        'hobby_category': controllers['hobby_category']?.text?.trim() ?? '',
        'fashion_category': controllers['fashion_category']?.text?.trim() ?? '',
        'size': controllers['size']?.text?.trim() ?? '',
        //  'price': double.parse(controllers['price']?.text ?? '0'),
        //  'price': parseStringToDouble(controllers['price']?.text), // Modified
        //  'salary': double.parse(controllers['salary']?.text ?? '0'),
        //  'salary': parseStringToDouble(controllers['salary']?.text), // Modified
        'year': int.parse(controllers['year']?.text ?? '0'),
        
       
      
        
        
        
      };
      

      final response = await http.post(
        Uri.parse('http://13.200.179.78/adposts'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: json.encode(formData),
      );
  setState(() {
        isLoading = false;
      });
      log('Response status: ${response.statusCode}');
      log('Response body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
          //  _clearSavedData(); // Clear saved data only on successful submission
        try {
          final Map<String, dynamic> responseData = json.decode(response.body);
          print('Parsed response data: $responseData');

          // Check for adpost ID in different possible locations
          String? adpostId;
          if (responseData.containsKey('_id')) {
            adpostId = responseData['_id'].toString();
          } else if (responseData.containsKey('id')) {
            adpostId = responseData['id'].toString();
          } else if (responseData.containsKey('adpost_id')) {
            adpostId = responseData['adpost_id'].toString();
          } else if (responseData.containsKey('data') && responseData['data'] is Map) {
            final data = responseData['data'] as Map<String, dynamic>;
            adpostId = data['_id']?.toString() ?? data['id']?.toString();
          }

          if (adpostId != null && adpostId.isNotEmpty) {
            // Save to SharedPreferences
            await prefs.setString('adpostId', adpostId);
            print('Successfully saved adpostId: $adpostId');
 // Check if widget is still mounted
            if (!mounted) return;
            setState(() {
              _isSubmitDisabled = true;
              _isFormReadOnly = true;
            });

            // ScaffoldMessenger.of(currentContext).showSnackBar(
            //   SnackBar(content: Text('Ad posted successfully!')),
            // );
              // Show success message before navigation
            ScaffoldMessenger.of(currentContext).showSnackBar(
              const SnackBar(
                content: Text('Ad posted successfully!'),
                duration: Duration(seconds: 1), // Short duration
              ),
            );
             // Add a small delay before navigation
            await Future.delayed(const Duration(milliseconds: 500));

            // Verify the save
            final savedId = await prefs.getString('adpostId');
            print('Verification - Retrieved adpostId: $savedId');
            
            
            // Navigate to UploadingScreen
            if (!mounted) return;
//             Navigator.pushAndRemoveUntil(
//     currentContext, // Check if widget is still mounted
//   MaterialPageRoute(builder: (context) => UploadingScreen()),
//   (route) => false, // Removes all previous routes
// );
            Navigator.pushReplacement(
              currentContext,
              MaterialPageRoute(builder: (context) => const UploadingScreen()),
            );

            
          }
          
           else {
             // Check if widget is still mounted
            if (!mounted) return;
            print('Response data structure: $responseData');
            throw Exception('Could not find adpost ID in response');
          }
        } catch (e) {
           // Check if widget is still mounted
            if (!mounted) return;
          print('Error parsing response: $e');
          throw Exception('Error processing server response: $e');
        }
      } 
//       else {
//  // Check if widget is still mounted
//             if (!mounted) return;
//         print('Server error response: ${response.body}');
     
//       }
//     } catch (e) {
//        // Check if widget is still mounted
//             if (!mounted) return;
//       print('Error in _submitForm: $e');
    
//     }
//   }
// }
else if (response.statusCode == 401) {
        // Add this new condition for subscription limit
        final errorResponse = json.decode(response.body);
        if (!mounted) return;
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Subscription Limit Reached Take New Subscription',
              style: TextStyle(
                color: Colors.red,
                fontWeight: FontWeight.bold,
                fontSize: 18,

              )
              
              ),
              content: Text(errorResponse['message'] ?? 'Subscription limit reached'),
              actions: <Widget>[
                TextButton(
                  child: const Text('OK'),
                  onPressed: () {
                     Navigator.of(context).push(
  MaterialPageRoute(builder: (context) => const PackageScreen()), // New route
 
);
                  },
                ),
              ],
            );
          },
        );
      } else {
        // Keep your existing error handling
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: ${response.body}'),
          ),
        );
      }
    } catch (e) {
      setState(() {
        isLoading = false;
      });
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error: $e'),
        ),
      );

    }
  }
}



void checkActiveSubscription() async {
  final prefs = await SharedPreferences.getInstance();
  final userData = prefs.getString('user_data');
  if (userData != null) {
    final userDataMap = json.decode(userData);
    print('Active Subscription: ${userDataMap['active_subscription']}');
    print('Subscription Rules: ${userDataMap['active_subscription_rules']}');
  }
}


// Helper function to retrieve adpostId
Future<String?> getAdpostId() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString('adpostId');


}





  @override
  Widget build(BuildContext context) {

    return Scaffold(
      backgroundColor: Colors.teal.shade50,
      appBar: AppBar(
        backgroundColor: Colors.teal.shade300,
        title: Text('Post in ${widget.subcategory}',

        style: TextStyle(
          color: Colors.white,
          fontFamily: 'Roboto',
          fontStyle: FontStyle.italic,
          
          decorationColor: Colors.black,
          decorationStyle: TextDecorationStyle.solid,

          fontWeight: FontWeight.bold,
          fontSize: 25,
          

        )
        
        
        ),
         automaticallyImplyLeading: true, // Disable back button
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Add form fields based on category and subcategory
              _buildFormFields(),
              SizedBox(height: 20),
              //  _buildMediaUploadSection(),
                 SizedBox(height: 20),

ElevatedButton(
 
  onPressed: _isSubmitDisabled ? null : _submitForm,
  child: Text('Submit',

  ),
  style: ElevatedButton.styleFrom(
    backgroundColor: _isSubmitDisabled ? Colors.red : null, // Optional: visual feedback
  
  
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(200),
    ),

  ),
 
),


              SizedBox(height: 20),
             
      






            ],
          ),
        ),
      ),
    );
  }



  Widget _buildFormFields() {
    // Return different form fields based on category and subcategory
    switch (widget.category) {
      case 'Cars':
        return _buildCarsForm();
      case 'properties':

       return _buildPropertiesForm();
        case 'Furniture':
        return _buildFurnitureForm();
      case 'Mobiles':
        return _buildMobilesForm();
         case 'Jobs':
        return _buildJobsForm();
        case 'Bikes':
         return _buildBikesForm();
         case 'Fashion':
        return _buildFashionForm();
        case 'Electronics & Appliances':
        return _buildElectronicsAppliancesForm();
        case 'Services':
        return _buildServicesForm();
        case 'Books, Sports & Hobbies':
        return _buildBooksSportsHobbiesForm();
          case 'Commercial Vehicles & Spares':
        return _buildCommercialVehiclesSparesForm();
        case 'Pets':
        return _buildPetsForm();

      default:
        return _buildDefaultForm();
    }
  }

  Widget _buildPropertiesForm() {
   
    return Column(
      children: [


    CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly:true,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
   
    const SizedBox(height: 10),

  
  
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.location_city),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),


      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly: true, // Make it read-only since we're using popup
  controller: controllers['category'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['type'],
  onTap: () {
    showModalBottomSheet(
      context: context,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: EdgeInsets.symmetric(vertical: 20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: Row(
                  children: [
                    Text(
                      'Select Property Type',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue[900],
                      ),
                    ),
                    Spacer(),
                    IconButton(
                      icon: Icon(Icons.close),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              Divider(),
              Expanded(
                child: ListView.builder(
                  itemCount: propertyTypes.length,
                  itemBuilder: (context, index) {
                    return ListTile(
                      leading: Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          color: Colors.blue[100],
                          borderRadius: BorderRadius.circular(16),
                        ),
                        child: Center(
                          child: Text(
                            propertyTypes[index]['id']!,
                            style: TextStyle(
                              color: Colors.blue[900],
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                      title: Text(
                        propertyTypes[index]['name']!,
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey[800],
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      onTap: () {
                        setState(() {
                          controllers['type']?.text = propertyTypes[index]['name']!;
                        });
                        Navigator.pop(context);
                      },
                      tileColor: controllers['type']?.text == propertyTypes[index]['name']
                          ? Colors.blue[50]
                          : null,
                    );
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  },
  decoration: InputDecoration(
    labelText: 'Type of Property',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Type of Property',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
        Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
         
  SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
       Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),       
     
          
        
        
      
      
       
      
       
        
             SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
       Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),       
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['area'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Area',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Area',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),






     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['bedrooms'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Bedrooms',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Bedrooms',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),





        
        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['bathrooms'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Bathrooms',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Bathrooms',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
        Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),
  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['ownerType'],
    onTap: () async {
    final selectedOwnerType = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Select Owner Type',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.minPositive,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: ownerTypes.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(Icons.person, color: Colors.blue[700]),
                  title: Text(ownerTypes[index]),
                  onTap: () {
                    Navigator.pop(context, ownerTypes[index]);
                  },
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedOwnerType != null) {
      setState(() {
        controllers['ownerType']?.text = selectedOwnerType;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Owner Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Owner Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
        Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
  
     

       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
  onTap: () {
    showModalBottomSheet(
      context: context,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: EdgeInsets.symmetric(vertical: 20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: Row(
                  children: [
                    Text(
                      'Select Furnishing Status',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue[900],
                      ),
                    ),
                    Spacer(),
                    IconButton(
                      icon: Icon(Icons.close),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              Divider(),
              ListView.builder(
                shrinkWrap: true,
                itemCount: furnishingTypes.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    leading: Container(
                      width: 40,
                      height: 40,
                      decoration: BoxDecoration(
                        color: Colors.blue[100],
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Icon(
                        furnishingTypes[index]['icon'],
                        color: Colors.blue[900],
                        size: 24,
                      ),
                    ),
                    title: Text(
                      furnishingTypes[index]['name'],
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: Colors.grey[800],
                      ),
                    ),
                    subtitle: Text(
                      furnishingTypes[index]['description'],
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                    onTap: () {
                      setState(() {
                        controllers['furnishing']?.text = 
                            furnishingTypes[index]['name'];
                      });
                      Navigator.pop(context);
                    },
                    tileColor: controllers['furnishing']?.text == 
                        furnishingTypes[index]['name']
                        ? Colors.blue[50]
                        : null,
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  },
  controller: controllers['furnishing'],
  decoration: InputDecoration(
    labelText: 'Furnishing',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Furnishing',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
       Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
// validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['floorNumber'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Floor Number',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Floor Number',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
       Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['totalFloors'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Total Floors',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Total Floors',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),


      
      
      
   
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
        Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
        








    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Include condition, features and reason for selling',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
       Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


 SizedBox(height: 10),
       






      ],
    );
  }

  Widget _buildMobilesForm() {
    // Add mobile-specific form fields
    return Column(
      children: [
 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
 
SizedBox(height: 10),
  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Enter Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
  
       
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.location_city),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),

         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
 onTap: () {
    final selectedTitle = controllers['title']?.text ?? '';
    if (selectedTitle.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select Title first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        final brands = titleBrandMap[selectedTitle] ?? [];
        final searchController = TextEditingController();
        List<String> filteredBrands = List.from(brands);

        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Column(
                children: [
                  Text('Select Brand for $selectedTitle'),
                  SizedBox(height: 10),
                  TextField(
                    controller: searchController,
                    decoration: InputDecoration(
                      hintText: 'Search Brand',
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 15, vertical: 0),
                    ),
                    onChanged: (value) {
                      setState(() {
                        filteredBrands = brands
                            .where((brand) => brand.toLowerCase()
                                .contains(value.toLowerCase()))
                            .toList();
                      });
                    },
                  ),
                ],
              ),
              content: Container(
                width: double.maxFinite,
                height: 300, // Fixed height for scrollable content
                child: ListView.builder(
                  itemCount: filteredBrands.length,
                  itemBuilder: (context, index) {
                    final brand = filteredBrands[index];
                    return ListTile(
                      leading: Container(
                        padding: EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.blue.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Icon(Icons.branding_watermark, 
                                  color: Colors.blue[700]),
                      ),
                      title: Text(
                        brand,
                        style: TextStyle(
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[800],
                        ),
                      ),
                      onTap: () {
                        setState(() {
                          controllers['brand']?.text = brand;
                        });
                        Navigator.pop(context);
                      },
                      selected: controllers['brand']?.text == brand,
                      selectedTileColor: Colors.blue[50],
                    );
                  },
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text('Cancel'),
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.red,
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  },
  decoration: InputDecoration(
    labelText: 'Brand',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
    
        SizedBox(height: 10),
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['model'],
   onTap: () {
    final selectedBrand = controllers['brand']?.text ?? '';
    if (selectedBrand.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select Brand first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        final models = brandModelMap[selectedBrand] ?? [];
        final searchController = TextEditingController();
        List<String> filteredModels = List.from(models);

        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Column(
                children: [
                  Text(
                    'Select Model for $selectedBrand',
                    style: TextStyle(
                      color: Colors.blue[900],
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 10),
                  TextField(
                    controller: searchController,
                    decoration: InputDecoration(
                      hintText: 'Search Model',
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 15, vertical: 0),
                    ),
                    onChanged: (value) {
                      setState(() {
                        filteredModels = models
                            .where((model) => model.toLowerCase()
                                .contains(value.toLowerCase()))
                            .toList();
                      });
                    },
                  ),
                ],
              ),
              content: Container(
                width: double.maxFinite,
                height: 300,
                child: ListView.builder(
                  itemCount: filteredModels.length,
                  itemBuilder: (context, index) {
                    final model = filteredModels[index];
                    return ListTile(
                      leading: Container(
                        padding: EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.blue.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Icon(
                          Icons.model_training,
                          color: Colors.blue[700],
                        ),
                      ),
                      title: Text(
                        model,
                        style: TextStyle(
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[800],
                        ),
                      ),
                      onTap: () {
                        setState(() {
                          controllers['model']?.text = model;
                        });
                        Navigator.pop(context);
                      },
                      selected: controllers['model']?.text == model,
                      selectedTileColor: Colors.blue[50],
                    );
                  },
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text(
                    'Cancel',
                    style: TextStyle(color: Colors.red),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  },
  decoration: InputDecoration(
    labelText: 'Model',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Model',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
  prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),

 SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['warranty'],
  decoration: InputDecoration(
    labelText: 'Warranty',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Warranty',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),



        
        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['storage'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Storage',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Storage',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),
 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['color'],
   onTap: () {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        final searchController = TextEditingController();
        List<Map<String, dynamic>> filteredColors = List.from(colorOptions);

        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Column(
                children: [
                  Text(
                    'Select Color',
                    style: TextStyle(
                      color: Colors.blue[900],
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 10),
                  TextField(
                    controller: searchController,
                    decoration: InputDecoration(
                      hintText: 'Search Color',
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      contentPadding: EdgeInsets.symmetric(horizontal: 15, vertical: 0),
                    ),
                    onChanged: (value) {
                      setState(() {
                        filteredColors = colorOptions
                            .where((color) => color['name']
                                .contains(value)) // Case sensitive search
                            .toList();
                      });
                    },
                  ),
                ],
              ),
              content: Container(
                width: double.maxFinite,
                height: 300,
                child: ListView.builder(
                  itemCount: filteredColors.length,
                  itemBuilder: (context, index) {
                    final color = filteredColors[index];
                    return ListTile(
                      leading: Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: Color(int.parse(
                            color['hex'].replaceAll('#', '0xFF'),
                          )),
                          borderRadius: BorderRadius.circular(20),
                          border: Border.all(
                            color: Colors.grey[300]!,
                            width: 1,
                          ),
                        ),
                      ),
                      title: Text(
                        color['name'],
                        style: TextStyle(
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[800],
                        ),
                      ),
                      onTap: () {
                        setState(() {
                          controllers['color']?.text = color['name'];
                        });
                        Navigator.pop(context);
                      },
                      selected: controllers['color']?.text == color['name'],
                      selectedTileColor: Colors.blue[50],
                    );
                  },
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text(
                    'Cancel',
                    style: TextStyle(color: Colors.red),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  },
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Color',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Color',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
 prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     
     

       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Condition of the pet',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
 prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),


  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['operatingSystem'],
  decoration: InputDecoration(
    labelText: 'Operating System',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Operating System',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['screenSize'],
  decoration: InputDecoration(
    labelText: 'screenSize',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter screenSize',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
  prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['camera'],
  decoration: InputDecoration(
    labelText: 'Camera',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Camera',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
    Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['battery'],
  decoration: InputDecoration(
    labelText: 'Battery',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Battery',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),
      
      
      
   
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
 prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
        








    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Include condition, features and reason for selling',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
    
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


 SizedBox(height: 10),
       







      ],
    );
  }
  Widget _buildJobsForm(){
    return Column(
      children: [


    const SizedBox(height: 10),


  
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

  SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['company'],
  decoration: InputDecoration(
    labelText: 'Company',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Company',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
), 
         
        
         
           SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['industry'],
  decoration: InputDecoration(
    labelText: 'Industry',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Industry',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
      prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),






     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['position'],
  decoration: InputDecoration(
    labelText: 'Position',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Position',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),





        
        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['salary'],
   keyboardType: TextInputType.number, // Numeric keyboard
  decoration: InputDecoration(
    labelText: 'Salary',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Salary',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation

  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),    



      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['experienceLevel'],

  decoration: InputDecoration(
    labelText: 'Experience Level',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Experience Level',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['jobType'],

  decoration: InputDecoration(
    labelText: 'Job Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Job Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
 keyboardType: TextInputType.number, // Numeric keyboard
  decoration: InputDecoration(
    labelText: 'year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
 
  // Adding a subtle animation
  //   validator: (value) {
  //   if (value == null || value.isEmpty) {
  //     return 'Year is required';
  //   }
  //   if (int.tryParse(value) == null) {
  //     return 'Please enter a valid year';
  //   }
  //   return null;
  // },
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
 
  // Adding a subtle animation
  //   validator: (value) {
  //   if (value == null || value.isEmpty) {
  //     return 'Price is required';
  //   }
  //   if (double.tryParse(value) == null) {
  //     return 'Please enter a valid number';
  //   }
  //   return null;
  // },
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),















        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['qualifications'],

  decoration: InputDecoration(
    labelText: 'Qualifications',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Qualifications',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
 SizedBox(height: 10),




Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],

  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
 SizedBox(height: 10),






    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Include condition, features and reason for selling',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),



       


      ],
    );
        
       
    
  }

  Widget _buildBikesForm() {
    return Column(
      children: [


    const SizedBox(height: 10),


  
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
 SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter the price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    // suffixIcon: Row(
    //   mainAxisSize: MainAxisSize.min,
    //   children: [
    //     Icon(
    //       Icons.bubble_chart,
    //       color: Colors.blue[700],
    //     ),
    //     Text(
    //       '*',
    //       style: TextStyle(
    //         color: Colors.red,
    //         fontSize: 20.0,
    //       ),
    //     ),
    //   ],
    // ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

         
     SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
    // onChanged: (value) => _saveFormData(),
     onTap: () async {
    // Check if title is selected
    final selectedTitle = controllers['title']?.text ?? '';
    if (selectedTitle.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select car first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    // Show brand selection dialog
    final selectedBrand = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        final brands = titleBrandMap[selectedTitle] ?? [];
        
        return AlertDialog(
          title: Text(
            'Select Brand for $selectedTitle',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: brands.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    Icons.branding_watermark,
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    brands[index],
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, brands[index]);
                  },
                  tileColor: controllers['brand']?.text == brands[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedBrand != null) {
      setState(() {
        controllers['brand']?.text = selectedBrand;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Brand (Required)',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
 
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

            
        SizedBox(height: 10),
     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['model'],
    // onChanged: (value) => _saveFormData(),
     onTap: () async {
    // Check if brand is selected
    final selectedBrand = controllers['brand']?.text ?? '';
    if (selectedBrand.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select Brand first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    // Show model selection dialog
    final selectedModel = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        final models = brandModelMap[selectedBrand] ?? [];
        
        return AlertDialog(
          title: Text(
            'Select Model for $selectedBrand',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: models.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    Icons.directions_car,
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    models[index],
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, models[index]);
                  },
                  tileColor: controllers['model']?.text == models[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedModel != null) {
      setState(() {
        controllers['model']?.text = selectedModel;
      });
    }
  },

  decoration: InputDecoration(
    labelText: 'Model',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Model',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
    Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
    keyboardType: TextInputType.number,
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  keyboardType: TextInputType.number,
  controller: controllers['mileage'],
  decoration: InputDecoration(
    labelText: 'Mileage',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Mileage(Km driven)',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
 // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['ownerType'],
    onTap: () async {
    final selectedOwnerType = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Select Owner Type',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.minPositive,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: ownerTypes.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(Icons.person, color: Colors.blue[700]),
                  title: Text(ownerTypes[index]),
                  onTap: () {
                    Navigator.pop(context, ownerTypes[index]);
                  },
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedOwnerType != null) {
      setState(() {
        controllers['ownerType']?.text = selectedOwnerType;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Owner Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
  
    hintText: 'Select Owner Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
 // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
 
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),




      ],
    );
}
Widget _buildCommercialVehiclesSparesForm(){
    return Column(
      children: [
          CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
     prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
   prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,

    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
    prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
     
    ),
    const SizedBox(height: 10),

       
        TextFormField(
  controller: controllers['state'], // Using t
  readOnly: true, // Make it read-only since we're using popup
  decoration: InputDecoration(
    labelText: 'State',
    hintText: 'Select State',
    prefixIcon: const Icon(Icons.location_city),
    suffixIcon: const Icon(Icons.arrow_drop_down),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
      controllers['state']?.text = selectedState;
      });
    }
  },
),

         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['make'],
  decoration: InputDecoration(
    labelText: 'Enter Make',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Make',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
         
      SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
  decoration: InputDecoration(
    labelText: 'Enter Brand',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),  
     
          
        SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['warranty'],
  decoration: InputDecoration(
    labelText: 'Enter Warranty',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Warranty',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),




   








   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['transmission'],
  decoration: InputDecoration(
    labelText: 'Enter transmission',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter transmission',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),





        
      



      
       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['color'],
  decoration: InputDecoration(
    labelText: 'Enter color',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter color',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
      
       
           SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
    readOnly: true,
  // readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),






     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['model'],
  decoration: InputDecoration(
    labelText: 'Model',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Model',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),





        

       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Condition of the pet',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),



      
      
      
   
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  keyboardType: TextInputType.number,
  controller: controllers['year'],

  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
        








    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Include condition, features and reason for selling',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
  prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


 SizedBox(height: 10),
       
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'prise'),
//         ),
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'city'),
//         ),

//  TextFormField(
//    readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'State'),

//         ),
        
//  TextFormField(
//    readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Category'),

//         ),
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Title',
//           hintText: 'A minimum length of Ten Charactrs required',

          
//           ),
//         ),
        
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Description',
//               hintText: 'Include condition, features and reason for selling',
          
//           ),
//           maxLines: 3,
//         ),
      ],
    );

 
}

  Widget _buildFashionForm(){
    return Column(
      children: [

  const SizedBox(height: 10),


  
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

    SizedBox(height: 10),    
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['fashion_category'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Fashion Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Fashion Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
 // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),    
SizedBox(height: 10),
 
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),    
 SizedBox(height: 10),
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Brand',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
 // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),    



SizedBox(height: 10),
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['product'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Product',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Product',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  //validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),  
SizedBox(height: 10),
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['size'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Fashion Size',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Size',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
 // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),  
       
    
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

  
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
 prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,

),
),
SizedBox(height: 10),
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
 
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
  prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Prise'),
//         ),
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'City'),
//         ),

//  TextFormField(
//    readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'State'),

//         ),
        
//  TextFormField(
//    readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Category'),

//         ),
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Title',
//           hintText: 'A minimum length of Ten Charactrs required',

          
//           ),
//         ),
        
//         TextFormField(
//            readOnly: _isFormReadOnly, // Add this line
//           decoration: InputDecoration(labelText: 'Description',
//               hintText: 'Include condition, features and reason for selling',
          
//           ),
//           maxLines: 3,
//         ),
      ],
    );
  }
  
  Widget _buildBooksSportsHobbiesForm(){
    return Column(
      children: [

     const SizedBox(height: 10),


  
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
SizedBox(height: 10),
    Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  decoration: InputDecoration(
    labelText: 'Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),



SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['product'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Product',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Product',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  //validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),









SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['hobby_category'],
  keyboardType: TextInputType.text,
  decoration: InputDecoration(
    labelText: 'Hobby Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Hobby Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  //validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),







  
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
 
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
 prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'category'),
        // ),
        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'location'),
        // ),
        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'city'),
        // ),
        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'state'),
        // ),
        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'prise'),
        // ),
        //  TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Condition'),
        // ),

        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Title'),
        // ),

        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Description',
        //       hintText: 'Include condition, features and reason for selling',
          
        //   ),
        //   maxLines: 3,
        // ),
      ],
    );
  }
  Widget _buildElectronicsAppliancesForm(){
    return Column(
      children: [
  
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,

    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
     prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
     
    ),
    const SizedBox(height: 10),
    
        TextFormField(
  controller: controllers['state'],
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
  cursorColor: Colors.deepPurple[400],
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
    readOnly:true,
  // readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

        SizedBox(height: 10),

        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['electronics_category'],
  decoration: InputDecoration(
    labelText: 'Electronics Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Electronics Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

    SizedBox(height: 10),

    
        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
  decoration: InputDecoration(
    labelText: 'Brand',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

    SizedBox(height: 10),


       
        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

  SizedBox(height: 10),
  
        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['product'],
  decoration: InputDecoration(
    labelText: 'Product',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Product',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['warranty'],
  decoration: InputDecoration(
    labelText: 'Warranty',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Warranty',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),

        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  keyboardType: TextInputType.number,
  controller: controllers['year'],
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),

        Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),




             ],
    );

  }

  Widget _buildServicesForm() {
    return Column(
      children: [
   
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,

    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
     
    ),
    const SizedBox(height: 10),

  
    





 
        TextFormField(
  controller: controllers['state'], // Using t
  readOnly: true, // Make it read-only since we're using popup
  decoration: InputDecoration(
    labelText: 'State',
    hintText: 'Select State',
    prefixIcon: const Icon(Icons.location_city),
    suffixIcon: const Icon(Icons.arrow_drop_down),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
      controllers['state']?.text = selectedState;
      });
    }
  },
),

         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
    readOnly:true,
  // readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: ' Enter Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
              SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Type of Service',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,

  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        
        
           SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number, 
  decoration: InputDecoration(
    labelText: ' Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter year of starting service',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),



        //   TextFormField(
        //      readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'city',

        //   ),
        // ),
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'state',

        //   ),
        // ),
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Type',

        //   ),
        // ),
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'location',

        //   ),
        // ),

        //   TextFormField(
        //      readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Categoty'),
        // ),
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Title'),
        // ),
        // TextFormField(
        //    readOnly: _isFormReadOnly, // Add this line
        //   decoration: InputDecoration(labelText: 'Description'),
        //   maxLines: 3,
        // ),
      ],
    );
  }

   Widget _buildCarsForm() {
    return SingleChildScrollView(
    child:Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
      
        const SizedBox(height: 10),


  
    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
   
  controller: controllers['title'],

  decoration: InputDecoration(
    labelText: 'Title',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Title',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
    const SizedBox(height: 10),
 TextFormField(
  controller: controllers['state'],
    // onChanged: (value) => _saveFormData(),
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
 
  cursorColor: Colors.deepPurple[400],
    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),
   
  
   SizedBox(height: 10),
   
    
 
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['city'],
 onTap: () async {
    // Debug print to check state value
    log('Current State Value: ${controllers['state']?.text}');
    
    final selectedCity = await showCitySelectionDialog(
      context,
      controllers['state']?.text ?? '',
    );
    if (selectedCity != null) {
      setState(() {
        controllers['city']?.text = selectedCity;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'City',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your city',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

     
    
 SizedBox(height: 10),    
  
   


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['location'],
  onTap: () async {
    // Debug print to check city value
    print('Current City Value: ${controllers['city']?.text}');
    
    final selectedLocation = await showLocationSelectionDialog(
      context,
      controllers['city']?.text ?? '',
    );
    if (selectedLocation != null) {
      setState(() {
        controllers['location']?.text = selectedLocation;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Location',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select your Location',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

 
       
//         TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.search),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),
   SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  // readOnly: _isFormReadOnly,
  readOnly:true,
  controller: controllers['category'],
    // onChanged: (value) => _saveFormData(),
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
     Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
 SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['price'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Price',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter the price',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    // suffixIcon: Row(
    //   mainAxisSize: MainAxisSize.min,
    //   children: [
    //     Icon(
    //       Icons.bubble_chart,
    //       color: Colors.blue[700],
    //     ),
    //     Text(
    //       '*',
    //       style: TextStyle(
    //         color: Colors.red,
    //         fontSize: 20.0,
    //       ),
    //     ),
    //   ],
    // ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
         
     SizedBox(height: 10),   
     Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['fuelType'],
   onTap: () async {
    final selectedFuelType = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Select Fuel Type',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.minPositive,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: fuelTypes.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    _getFuelTypeIcon(fuelTypes[index]),
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    fuelTypes[index],
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, fuelTypes[index]);
                  },
                  tileColor: controllers['fuelType']?.text == fuelTypes[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedFuelType != null) {
      setState(() {
        controllers['fuelType']?.text = selectedFuelType;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Fuel Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Fuel Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
 
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
), 
SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['brand'],
    // onChanged: (value) => _saveFormData(),
     onTap: () async {
    // Check if title is selected
    final selectedTitle = controllers['category']?.text ?? '';
    if (selectedTitle.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select car first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    // Show brand selection dialog
    final selectedBrand = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        final brands = titleBrandMap[selectedTitle] ?? [];
        
        return AlertDialog(
          title: Text(
            'Select Brand for $selectedTitle',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: brands.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    Icons.branding_watermark,
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    brands[index],
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, brands[index]);
                  },
                  tileColor: controllers['brand']?.text == brands[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedBrand != null) {
      setState(() {
        controllers['brand']?.text = selectedBrand;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Brand (Required)',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Brand',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  // validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
 
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

            
        SizedBox(height: 10),
     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['model'],
    // onChanged: (value) => _saveFormData(),
     onTap: () async {
    // Check if brand is selected
    final selectedBrand = controllers['brand']?.text ?? '';
    if (selectedBrand.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select Brand first'),
          duration: Duration(seconds: 2),
        ),
      );
      return;
    }

    // Show model selection dialog
    final selectedModel = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        final models = brandModelMap[selectedBrand] ?? [];
        
        return AlertDialog(
          title: Text(
            'Select Model for $selectedBrand',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: models.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    Icons.directions_car,
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    models[index],
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, models[index]);
                  },
                  tileColor: controllers['model']?.text == models[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedModel != null) {
      setState(() {
        controllers['model']?.text = selectedModel;
      });
    }
  },

  decoration: InputDecoration(
    labelText: 'Model',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Model',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
    Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),





        
        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly:true,
  controller: controllers['ownerType'],
     onTap: () async {
    final selectedOwnerType = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Select Owner Type',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.minPositive,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: ownerTypes.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(Icons.person, color: Colors.blue[700]),
                  title: Text(ownerTypes[index]),
                  onTap: () {
                    Navigator.pop(context, ownerTypes[index]);
                  },
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedOwnerType != null) {
      setState(() {
        controllers['ownerType']?.text = selectedOwnerType;
      });
    }
  },
  decoration: InputDecoration(
    labelText: 'Owner Type',
   
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Owner Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],

  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Condition of the pet',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),


  




  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),
  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
   onTap: () async {
    final selectedTransmission = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Select Transmission Type',
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Container(
            width: double.minPositive,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: transmissionTypes.length,
              itemBuilder: (BuildContext context, int index) {
                return ListTile(
                  leading: Icon(
                    Icons.settings,  // or Icons.car_repair
                    color: Colors.blue[700],
                  ),
                  title: Text(
                    '${index + 1}. ${transmissionTypes[index]}',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[800],
                    ),
                  ),
                  onTap: () {
                    Navigator.pop(context, transmissionTypes[index]);
                  },
                  tileColor: controllers['transmission']?.text == transmissionTypes[index]
                      ? Colors.blue[50]
                      : null,
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );

    if (selectedTransmission != null) {
      setState(() {
        controllers['transmission']?.text = selectedTransmission;
      });
    }
  },
  controller: controllers['transmission'],
  decoration: InputDecoration(
    labelText: 'Transmission Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Transmission type (Manual or Automatic)',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
 
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),



      SizedBox(height: 10),    
    








  Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter a detailed description of the product',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
 
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
 


      ],
    ),
    );
  }





 Widget _buildFurnitureForm(){ 
    return Column(
      children: [

    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'Title',
     hintText:'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
   prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
    prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
    ),
    const SizedBox(height: 10),
  

//       TextFormField(
//   controller: controllers['state'], // Using t
//   readOnly: true, // Make it read-only since we're using popup
//   decoration: InputDecoration(
//     labelText: 'State',
//     hintText: 'Select State',
//     prefixIcon: const Icon(Icons.location_city),
//     suffixIcon: const Icon(Icons.arrow_drop_down),
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(12),
//     ),
//   ),
//   onTap: () async {
//     final selectedState = await showStateSelectionDialog(context);
//     if (selectedState != null) {
//       setState(() {
//       controllers['state']?.text = selectedState;
//       });
//     }
//   },
// ),

TextFormField(
  controller: controllers['state'],
  readOnly: true, // Keeps it read-only for selection dialog
  decoration: InputDecoration(
    labelText: 'State',
    labelStyle: TextStyle(
      color: Colors.deepPurple[300],
      fontWeight: FontWeight.w600,
      letterSpacing: 1.2,
      fontSize: 14.0,
      fontFamily: 'Roboto',
      fontStyle: FontStyle.italic,
    ),
    hintText: 'Select State',
    hintStyle: TextStyle(
      color: Colors.deepPurple[200],
      fontStyle: FontStyle.italic,
      fontSize: 14.0,
    ),
    prefixIcon: Icon(
      Icons.location_city,
      color: Colors.deepPurple[400],
      size: 22,
    ),
    filled: true,
    fillColor: Colors.white,
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(20.0),
      borderSide: BorderSide(
        color: Colors.deepPurple[400]!,
        width: 2.0,
      ),
    ),
    contentPadding: EdgeInsets.symmetric(
      vertical: 18.0,
      horizontal: 20.0,
    ),
    // Stylish gradient dropdown icon
    suffixIcon: Container(
      margin: EdgeInsets.all(4.0),
      padding: EdgeInsets.all(6.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
      ),
      child: Icon(
        Icons.arrow_drop_down,
        color: Colors.white,
        size: 24,
      ),
    ),
  ),
  style: TextStyle(
    fontSize: 20.0,
    color: Colors.deepPurple[800],
    fontWeight: FontWeight.w500,
    letterSpacing: 0.5,
    shadows: [
      Shadow(
        color: Colors.deepPurple[100]!,
        offset: Offset(0, 0.1),
        blurRadius: 1,
      ),
    ],
    fontFamily: 'Roboto',
  ),
  cursorColor: Colors.deepPurple[400],
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
        controllers['state']?.text = selectedState;
      });
    }
  },
),


SizedBox(height: 10),
// Container(
//   decoration: BoxDecoration(
//     gradient: LinearGradient(
//       colors: [
//         Colors.deepPurple[100]!,
//         Colors.purple[200]!,
//         Colors.deepPurple[200]!,
//       ],
//       begin: Alignment.topCenter,
//       end: Alignment.bottomCenter,
//     ),
//     borderRadius: BorderRadius.circular(40.0),
//     boxShadow: [
//       BoxShadow(
//         color: Colors.deepPurple[200]!.withOpacity(0.3),
//         blurRadius: 35.0,
//         offset: Offset(0, 8),
//       ),
//     ],
//   ),
//   child:
//   TextFormField(
//   readOnly: _isFormReadOnly,
//   controller: controllers['product'],
//   decoration: InputDecoration(
//     labelText: 'Product',
//     labelStyle: TextStyle(
//       color: Colors.deepPurple[300],
//       fontWeight: FontWeight.w600,
//       letterSpacing: 1.2,
//       fontSize: 14.0,
//       shadows: [
//         Shadow(
//           color: Colors.deepPurple[100]!,
//           offset: Offset(0, 2),
//           blurRadius: 4,
//         ),
//       ],
//       fontFamily: 'Roboto',
//       fontStyle: FontStyle.italic,
//     ),
    
//     hintText: 'Enter your product',
//     hintStyle: TextStyle(
//       color: Colors.deepPurple[200],
//       fontStyle: FontStyle.italic,
//       fontSize: 14.0,
//     ),
//     prefixIcon: Icon(
//      Icons.pets,
//       color: Colors.deepPurple[400],
//       size: 20,
//     ),
//     filled: true,
//     fillColor: Colors.white,
//     border: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     enabledBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide.none,
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderRadius: BorderRadius.circular(20.0),
//       borderSide: BorderSide(
//         color: Colors.deepPurple[400]!,
//         width: 2.0,
//         style: BorderStyle.solid,
//       ),
//     ),
//     contentPadding: EdgeInsets.symmetric(
//       vertical: 18.0,
//       horizontal: 20.0,
//     ),
//     // Unique gradient background effect
//     floatingLabelBehavior: FloatingLabelBehavior.auto,
//     suffixIcon: Container(
//       margin: EdgeInsets.all(4.0),
//       padding: EdgeInsets.all(6.0),
//       decoration: BoxDecoration(
//         gradient: LinearGradient(
//           colors: [Colors.deepPurple[400]!, Colors.purple[200]!],
//           begin: Alignment.topLeft,
//           end: Alignment.bottomRight,
//         ),
//         shape: BoxShape.circle,
//       ),
//       child: Icon(
//         Icons.pets,
//         color: Colors.white,
//         size: 18,
//       ),
//     ),
//   ),
//   style: TextStyle(
//     fontSize: 20.0,
  
//     color: Colors.deepPurple[800],
//     fontWeight: FontWeight.w500,
//     letterSpacing: 0.5,
//     shadows: [
//       Shadow(
//         color: Colors.deepPurple[100]!,
//         offset: Offset(0, 0.1),
//         blurRadius: 1,
//       ),
//     ],
//     fontFamily: 'Roboto', // Custom font family
//   ),
//   cursorColor: Colors.deepPurple[400],
//   validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
//   // Adding a subtle animation
//   keyboardAppearance: Brightness.light,
// ),
// ),


 Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['product'],
  decoration: InputDecoration(
    labelText: 'Product',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter your product',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

      
       Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['material'],
  decoration: InputDecoration(
    labelText: 'Material',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Material',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

     
       SizedBox(height: 10),
       Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['dimensions'],
  decoration: InputDecoration(
    labelText: 'Dimensions',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Dimensions',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),


),
     

       SizedBox(height: 10),
       Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: true,
  // readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),
          Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Condition',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),

         Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Enter Description',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       


 SizedBox(height: 10),






      ],
    );
 }








  Widget _buildPetsForm(){
    return Column(
      children: [

    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'Title',
     hintText:
            'Mention the key features of your item (e.g. brand, model, age, type)',
      prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['title']!,
    ),
    const SizedBox(height: 10),
    CustomTextFormField(
labelText: 'city',
      hintText: 'Please enter the city',
     prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['city']!,
    ),
    const SizedBox(height: 10),
  
    CustomTextFormField(
      labelText: 'location',
      hintText: 'Please enter the location',
        prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['location']!,

    ),
    const SizedBox(height: 10),
    CustomTextFormField(
      labelText: 'price',
      hintText: 'Please enter the price',
       prefixIcon: Icons.search,
      readOnly: _isFormReadOnly,
      controller: controllers['price']!,
     
    ),
    const SizedBox(height: 10),

       
        TextFormField(
  controller: controllers['state'], // Using t
  readOnly: true, // Make it read-only since we're using popup
  decoration: InputDecoration(
    labelText: 'State',
    hintText: 'Select State',
    prefixIcon: const Icon(Icons.location_city),
    suffixIcon: const Icon(Icons.arrow_drop_down),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  onTap: () async {
    final selectedState = await showStateSelectionDialog(context);
    if (selectedState != null) {
      setState(() {
      controllers['state']?.text = selectedState;
      });
    }
  },
),

         
     SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['vaccinationType'],
  decoration: InputDecoration(
    labelText: 'Vaccination Type',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Vaccination Type',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

   
         
        
     
          
        
        
      
      
       
      
       
           SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
    readOnly:true,
  // readOnly: _isFormReadOnly,
  controller: controllers['category'],
  decoration: InputDecoration(
    labelText: 'Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
        SizedBox(height: 10),






     
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['pet_category'],
  decoration: InputDecoration(
    labelText: 'Pet Category',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Pet Category',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
  prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),

SizedBox(height: 10),





        
        
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['breed'],
  decoration: InputDecoration(
    labelText: 'Breed',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Breed',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
   prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
     

       SizedBox(height: 10),    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['condition'],
  decoration: InputDecoration(
    labelText: 'Condition',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Condition of the pet',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),



      
      
      
   
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['year'],
  keyboardType: TextInputType.number,
  decoration: InputDecoration(
    labelText: 'Year',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Select Year',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
     prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),
SizedBox(height: 10),
        








    
      Container(
  decoration: BoxDecoration(
  
    color: Colors.white,
        borderRadius: BorderRadius.circular(25.0),
   boxShadow: [
          BoxShadow(
            color: Colors.grey[300]!.withOpacity(0.5),
            blurRadius: 10.0,
            offset: const Offset(0, 2),
          ),
        ],
  ),
  child:
  TextFormField(
  readOnly: _isFormReadOnly,
  controller: controllers['description'],
  maxLines: 3,
  decoration: InputDecoration(
    labelText: 'Description',
     labelStyle: TextStyle(
            color: Colors.grey[800],
            fontWeight: FontWeight.w600,
            fontSize: 16.0,
            fontFamily: 'Roboto',
          ),
    hintText: 'Include condition, features and reason for selling',
     hintStyle: TextStyle(
            color: Colors.grey[600],
            fontSize: 14.0,
          ),
    prefixIcon: Icon(
      Icons.search,
        color: Colors.grey[700],
      size: 22,
    ),
     suffixIcon: Icon(
            Icons.bubble_chart,
            color: Colors.blue[700],
          ),
    filled: true,
   fillColor: Colors.transparent,
     border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.grey[300]!, width: 1.0),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20.0),
            borderSide: BorderSide(color: Colors.blue[400]!, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 18.0,
            horizontal: 20.0,
          ),
    // Unique gradient background effect
    floatingLabelBehavior: FloatingLabelBehavior.auto,
   
  ),
  style: TextStyle(
          fontSize: 18.0,
          color: Colors.grey[900],
          fontWeight: FontWeight.w500,
          fontFamily: 'Roboto',
        ),
  cursorColor: Colors.blue[600],
  validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
  // Adding a subtle animation
  keyboardAppearance: Brightness.light,
),
),


 SizedBox(height: 10),
       
    
       


    
  

      ]
    );
  }




  Widget _buildDefaultForm() {
    return Column(
      children: [
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Title'),
        ),
        TextFormField(
           readOnly: _isFormReadOnly, // Add this line
          decoration: InputDecoration(labelText: 'Description'),
          maxLines: 3,
        ),
      ],
    );
  }
}
